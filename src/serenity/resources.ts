/**
 * This file was generated by running this command:
 * ts-node tools\generators\generateSerenityResources.ts
 * on 8/29/2017, 1:28:00 PM
 * from serenity/pyserenity/resources (branch master, commit 29f1886)
 * (if modified by hand, replace this line with modification description)
 */

// tslint:disable:class-name
// tslint:disable:variable-name
// tslint:disable:no-string-literal
// tslint:disable:max-line-length

import * as lodash from 'lodash'
import { forEachX, getAllX } from './paging'
import { AckState } from './primitives'
import { AddressMode } from './primitives'
import { AlarmState } from './primitives'
import { ArchType } from './primitives'
import { AuthProtocol } from './primitives'
import { BackupStatus } from './primitives'
import { BackupStatusReason } from './primitives'
import { CellLayout } from './primitives'
import { DataSourceType } from './primitives'
import { DataStorageType } from './primitives'
import { DbStatus } from './primitives'
import { DeviceState } from './primitives'
import { DeviceStatus } from './primitives'
import { DeviceType } from './primitives'
import { ExportFormat } from './primitives'
import { ExportStatus } from './primitives'
import { ExportStatusReason } from './primitives'
import { FeatureName } from './primitives'
import { GapReason } from './primitives'
import { HddStatus } from './primitives'
import { Host } from './primitives'
import { IP } from './primitives'
import { IPv4 } from './primitives'
import { IPv4Range } from './primitives'
import { IPv6 } from './primitives'
import { IPv6ap } from './primitives'
import { KVObject } from './primitives'
import { MediaType } from './primitives'
import { MemberState } from './primitives'
import { MgTranscast } from './primitives'
import { MonitorPosition } from './primitives'
import { OsType } from './primitives'
import { PermissionID } from './primitives'
import { PhoneNumber } from './primitives'
import { PrivacyProtocol } from './primitives'
import { QuickLogStatus } from './primitives'
import { QuickReportStatus } from './primitives'
import { RecordFramerate } from './primitives'
import { RecordType } from './primitives'
import { RecurrenceType } from './primitives'
import { RelayState } from './primitives'
import { RenderType } from './primitives'
import { ReportContent } from './primitives'
import { ResourceRef } from './primitives'
import { RetentionPriority } from './primitives'
import { RtspCapability } from './primitives'
import { SASLString } from './primitives'
import { ScheduleAction } from './primitives'
import { SearchStatus } from './primitives'
import { SnmpVersion } from './primitives'
import { StreamFormat } from './primitives'
import { StreamProtocol } from './primitives'
import { StreamSource } from './primitives'
import { SystemType } from './primitives'
import { TimeOfDay } from './primitives'
import { TimeOffset } from './primitives'
import { TimeRange } from './primitives'
import { UPN } from './primitives'
import { URI } from './primitives'
import { VxConfigStatus } from './primitives'
import { VxNodeType } from './primitives'
import { XCast } from './primitives'

import { SituationType } from './situations'

import Serenity, { PostRequestConfig, CreateMethod } from './index'

export abstract class SerenityObjectBase {
  _serenity?: Serenity
  _type: string
  build(serenity: Serenity) {
    this._serenity = serenity
    return this
  }
}

export abstract class SerenityCollectionBase<T extends SerenityObjectBase> extends SerenityObjectBase {
  collection_header?: CollectionHeader
  getNext: (params?) => Promise<T>
  getPrev: (params?) => Promise<T>
  addCollectionLinks(create: CreateMethod<T>) {
    const _links = this.collection_header._links
    if (_links && _links.next) {
      this.getNext = (params?) => this._serenity.getSimple(_links.next, { params: params }, create)
    }
    if (_links && _links.prev) {
      this.getPrev = (params?) => this._serenity.getSimple(_links.prev, { params: params }, create)
    }
  }
}

export interface ActivationData {
  count: number
  id: string
}

export class Activation extends SerenityObjectBase {
  static create(data, serenity: Serenity): Activation {
    return lodash.assign(new Activation(), data).build(serenity)
  }
  count: number
  id: string
  _limits: {
    count: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Activation'
    return this
  }
}

export interface AlarmInputData {
  description?: string
  id: string
  name?: string
  state?: AlarmState
}

export interface AlarmInputEditData {
  description?: string
  name?: string
}

export class AlarmInput extends SerenityObjectBase {
  static create(data, serenity: Serenity): AlarmInput {
    return lodash.assign(new AlarmInput(), data).build(serenity)
  }
  description?: string
  id: string
  name?: string
  state?: AlarmState
  _links: {
    self: string
    edit?: string
    '/pelco/rel/device'?: string
  }
  _embedded: {
    '/pelco/rel/device'?: Device
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, AlarmInput.create)
  }
  edit(data: AlarmInputEditData) {
    return this._serenity.patchSimple<AlarmInput, AlarmInputEditData>(this, data)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'AlarmInput'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    return this
  }
}

export interface AlarmInputsData {
  alarm_inputs: Array<AlarmInputData>
  collection_header?: CollectionHeaderData
}

export class AlarmInputs extends SerenityCollectionBase<AlarmInputs> {
  static create(data, serenity: Serenity): AlarmInputs {
    return lodash.assign(new AlarmInputs(), data).build(serenity)
  }
  alarm_inputs: Array<AlarmInput>
  collection_header?: CollectionHeader
  forEachAlarmInput(callbackfn: (x: AlarmInput) => void): Promise<void> {
    return forEachX<AlarmInputs, AlarmInput>('alarm_inputs', this, callbackfn)
  }
  getAllAlarmInputs(): Promise<Array<AlarmInput>> {
    return getAllX<AlarmInputs, AlarmInput>('alarm_inputs', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'AlarmInputs'
    if (this.alarm_inputs) {
      this.alarm_inputs = this.alarm_inputs.map(item => AlarmInput.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(AlarmInputs.create)
    }
    return this
  }
}

export interface AutoActivationData {
  count: number
  id: string
  license_server: URI
}

export class AutoActivation extends SerenityObjectBase {
  static create(data, serenity: Serenity): AutoActivation {
    return lodash.assign(new AutoActivation(), data).build(serenity)
  }
  count: number
  id: string
  license_server: URI
  _limits: {
    count: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'AutoActivation'
    return this
  }
}

export interface BackupRequestData {
  keep?: number
  password?: string
  path: string
  username?: UPN
}

export class BackupRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): BackupRequest {
    return lodash.assign(new BackupRequest(), data).build(serenity)
  }
  keep?: number
  password?: string
  path: string
  username?: UPN
  _limits: {
    keep?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'BackupRequest'
    return this
  }
}

export interface BookmarkData {
  data_source_id?: string
  description?: string
  group_id?: string
  id: string
  lock?: Bookmark_LockData
  name?: string
  time: Date
}

export interface BookmarkEditData {
  description?: string
  name?: string
}

export class Bookmark extends SerenityObjectBase {
  static create(data, serenity: Serenity): Bookmark {
    return lodash.assign(new Bookmark(), data).build(serenity)
  }
  data_source_id?: string
  description?: string
  group_id?: string
  id: string
  lock?: Bookmark_Lock
  name?: string
  time: Date
  _links: {
    self: string
    edit?: string
    '/pelco/rel/data_source'?: string
    '/pelco/rel/delete'?: string
  }
  _embedded: {
    '/pelco/rel/data_source'?: DataSource
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Bookmark.create)
  }
  edit(data: BookmarkEditData) {
    return this._serenity.patchSimple<Bookmark, BookmarkEditData>(this, data)
  }
  getDataSource(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_source'], { params: params }, DataSource.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Bookmark'
    if (this.lock) {
      this.lock = Bookmark_Lock.create(this.lock, serenity)
    }
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/data_source'] === undefined) { this.getDataSource = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface Bookmark_LockData {
  enabled: boolean
  end_time: Date
  start_time: Date
}

export interface Bookmark_LockEditData {
  enabled: boolean
  end_time: Date
  start_time: Date
}

export class Bookmark_Lock extends SerenityObjectBase {
  static create(data, serenity: Serenity): Bookmark_Lock {
    return lodash.assign(new Bookmark_Lock(), data).build(serenity)
  }
  enabled: boolean
  end_time: Date
  start_time: Date
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Bookmark_Lock.create)
  }
  edit(data: Bookmark_LockEditData) {
    return this._serenity.patchSimple<Bookmark_Lock, Bookmark_LockEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Bookmark.Lock'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface BookmarksData {
  bookmarks: Array<BookmarkData>
  collection_header?: CollectionHeaderData
}

export class Bookmarks extends SerenityCollectionBase<Bookmarks> {
  static create(data, serenity: Serenity): Bookmarks {
    return lodash.assign(new Bookmarks(), data).build(serenity)
  }
  bookmarks: Array<Bookmark>
  collection_header?: CollectionHeader
  _links: {
    '/pelco/rel/add_bookmark'?: string
    '/pelco/rel/add_locked_bookmark'?: string
  }
  postAddBookmark(data: NewBookmarkData, config?: PostRequestConfig) {
    let postData = NewBookmark.create(data, this._serenity)
    postData._type = 'NewBookmark'
    return this._serenity.postSimple<NewBookmark, Bookmark>(
      this._links['/pelco/rel/add_bookmark'], postData, config, Bookmark.create
    )
  }
  postAddLockedBookmark(data: NewLockedBookmarkData, config?: PostRequestConfig) {
    let postData = NewLockedBookmark.create(data, this._serenity)
    postData._type = 'NewLockedBookmark'
    return this._serenity.postSimple<NewLockedBookmark, Bookmark>(
      this._links['/pelco/rel/add_locked_bookmark'], postData, config, Bookmark.create
    )
  }
  forEachBookmark(callbackfn: (x: Bookmark) => void): Promise<void> {
    return forEachX<Bookmarks, Bookmark>('bookmarks', this, callbackfn)
  }
  getAllBookmarks(): Promise<Array<Bookmark>> {
    return getAllX<Bookmarks, Bookmark>('bookmarks', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Bookmarks'
    if (this.bookmarks) {
      this.bookmarks = this.bookmarks.map(item => Bookmark.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Bookmarks.create)
    }
    if (!this._links || this._links['/pelco/rel/add_bookmark'] === undefined) { this.postAddBookmark = undefined }
    if (!this._links || this._links['/pelco/rel/add_locked_bookmark'] === undefined) { this.postAddLockedBookmark = undefined }
    return this
  }
}

export interface CertRequestData {
  password: string
}

export class CertRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): CertRequest {
    return lodash.assign(new CertRequest(), data).build(serenity)
  }
  password: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'CertRequest'
    return this
  }
}

export interface ClipData {
  data_interfaces?: Array<DataInterfaceData>
  data_source_id: string
  data_source_name?: string
  data_storage_id?: string
  end_time: Date
  event: RecordType
  framerate?: RecordFramerate
  priority: RetentionPriority
  source_data_storage_id?: string
  start_time: Date
  type: MediaType
}

export class Clip extends SerenityObjectBase {
  static create(data, serenity: Serenity): Clip {
    return lodash.assign(new Clip(), data).build(serenity)
  }
  data_interfaces?: Array<DataInterface>
  data_source_id: string
  data_source_name?: string
  data_storage_id?: string
  end_time: Date
  event: RecordType
  framerate?: RecordFramerate
  priority: RetentionPriority
  source_data_storage_id?: string
  start_time: Date
  type: MediaType
  _links: {
    '/pelco/rel/snapshots'?: string
  }
  _embedded: {
    '/pelco/rel/snapshots'?: ArrayBuffer
  }
  getSnapshots(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/snapshots']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Clip'
    if (this.data_interfaces) {
      this.data_interfaces = this.data_interfaces.map(item => DataInterface.create(item, serenity))
    }
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    if (!this._links || this._links['/pelco/rel/snapshots'] === undefined) { this.getSnapshots = undefined }
    return this
  }
}

export interface ClipsData {
  clips: Array<ClipData>
  collection_header?: CollectionHeaderData
}

export class Clips extends SerenityCollectionBase<Clips> {
  static create(data, serenity: Serenity): Clips {
    return lodash.assign(new Clips(), data).build(serenity)
  }
  clips: Array<Clip>
  collection_header?: CollectionHeader
  _links: {
    '/pelco/rel/delete'?: string
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  forEachClip(callbackfn: (x: Clip) => void): Promise<void> {
    return forEachX<Clips, Clip>('clips', this, callbackfn)
  }
  getAllClips(): Promise<Array<Clip>> {
    return getAllX<Clips, Clip>('clips', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Clips'
    if (this.clips) {
      this.clips = this.clips.map(item => Clip.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Clips.create)
    }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface CollectionHeaderData {
  limits?: {}
  partial?: boolean
  start_index?: number
  total_items?: number
}

export class CollectionHeader extends SerenityObjectBase {
  static create(data, serenity: Serenity): CollectionHeader {
    return lodash.assign(new CollectionHeader(), data).build(serenity)
  }
  limits?: {}
  partial?: boolean
  start_index?: number
  total_items?: number
  _limits: {
    start_index?: Limit_Integer
    total_items?: Limit_Integer
  }
  _links: {
    next?: string
    prev?: string
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'CollectionHeader'
    return this
  }
}

export interface ConfigData {
  interfaces?: Array<Config_InterfaceData>
}

export interface ConfigEditData {
  interfaces?: Array<Config_InterfaceEditData>
}

export class Config extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config {
    return lodash.assign(new Config(), data).build(serenity)
  }
  interfaces?: Array<Config_Interface>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/ad'?: string
    '/pelco/rel/dhcp'?: string
    '/pelco/rel/ldap'?: string
    '/pelco/rel/node'?: string
    '/pelco/rel/server'?: string
    '/pelco/rel/snmp'?: string
    '/pelco/rel/ssh'?: string
    '/pelco/rel/time'?: string
    '/pelco/rel/vxs'?: string
  }
  _embedded: {
    '/pelco/rel/ad'?: Config_Ad
    '/pelco/rel/dhcp'?: Config_Dhcp
    '/pelco/rel/ldap'?: Config_Ldap
    '/pelco/rel/node'?: Config_VxNode
    '/pelco/rel/server'?: Config_Server
    '/pelco/rel/snmp'?: Config_Snmp
    '/pelco/rel/ssh'?: Config_Ssh
    '/pelco/rel/time'?: Config_Time
    '/pelco/rel/vxs'?: Config_VxStorage
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config.create)
  }
  edit(data: ConfigEditData) {
    return this._serenity.patchSimple<Config, ConfigEditData>(this, data)
  }
  getAd(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ad'], { params: params }, Config_Ad.create)
  }
  getDhcp(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/dhcp'], { params: params }, Config_Dhcp.create)
  }
  getLdap(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ldap'], { params: params }, Config_Ldap.create)
  }
  getNode(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/node'], { params: params }, Config_VxNode.create)
  }
  getServer(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/server'], { params: params }, Config_Server.create)
  }
  getSnmp(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/snmp'], { params: params }, Config_Snmp.create)
  }
  getSsh(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ssh'], { params: params }, Config_Ssh.create)
  }
  getTime(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/time'], { params: params }, Config_Time.create)
  }
  getVxs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/vxs'], { params: params }, Config_VxStorage.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config'
    if (this.interfaces) {
      this.interfaces = this.interfaces.map(item => Config_Interface.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/ad'] === undefined) { this.getAd = undefined }
    if (!this._links || this._links['/pelco/rel/dhcp'] === undefined) { this.getDhcp = undefined }
    if (!this._links || this._links['/pelco/rel/ldap'] === undefined) { this.getLdap = undefined }
    if (!this._links || this._links['/pelco/rel/node'] === undefined) { this.getNode = undefined }
    if (!this._links || this._links['/pelco/rel/server'] === undefined) { this.getServer = undefined }
    if (!this._links || this._links['/pelco/rel/snmp'] === undefined) { this.getSnmp = undefined }
    if (!this._links || this._links['/pelco/rel/ssh'] === undefined) { this.getSsh = undefined }
    if (!this._links || this._links['/pelco/rel/time'] === undefined) { this.getTime = undefined }
    if (!this._links || this._links['/pelco/rel/vxs'] === undefined) { this.getVxs = undefined }
    return this
  }
}

export interface Config_AdData {
  domain: string
  enabled: boolean
}

export interface Config_AdEditData {
  domain: string
  enabled: boolean
}

export class Config_Ad extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Ad {
    return lodash.assign(new Config_Ad(), data).build(serenity)
  }
  domain: string
  enabled: boolean
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Ad.create)
  }
  edit(data: Config_AdEditData) {
    return this._serenity.patchSimple<Config_Ad, Config_AdEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Ad'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_DhcpData {
  enabled: boolean
}

export interface Config_DhcpEditData {
  enabled: boolean
}

export class Config_Dhcp extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp {
    return lodash.assign(new Config_Dhcp(), data).build(serenity)
  }
  enabled: boolean
  _links: {
    self: string
    edit?: string
    '/pelco/rel/leases'?: string
    '/pelco/rel/reservations'?: string
    '/pelco/rel/scopes'?: string
  }
  _embedded: {
    '/pelco/rel/leases'?: Config_Dhcp_Leases
    '/pelco/rel/reservations'?: Config_Dhcp_Reservations
    '/pelco/rel/scopes'?: Config_Dhcp_Scopes
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Dhcp.create)
  }
  edit(data: Config_DhcpEditData) {
    return this._serenity.patchSimple<Config_Dhcp, Config_DhcpEditData>(this, data)
  }
  getLeases(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/leases'], { params: params }, Config_Dhcp_Leases.create)
  }
  getReservations(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/reservations'], { params: params }, Config_Dhcp_Reservations.create)
  }
  getScopes(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/scopes'], { params: params }, Config_Dhcp_Scopes.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/leases'] === undefined) { this.getLeases = undefined }
    if (!this._links || this._links['/pelco/rel/reservations'] === undefined) { this.getReservations = undefined }
    if (!this._links || this._links['/pelco/rel/scopes'] === undefined) { this.getScopes = undefined }
    return this
  }
}

export interface Config_Dhcp_LeaseData {
  address: IPv4
  mac: string
}

export class Config_Dhcp_Lease extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp_Lease {
    return lodash.assign(new Config_Dhcp_Lease(), data).build(serenity)
  }
  address: IPv4
  mac: string
  _links: {
    self: string
    '/pelco/rel/delete': string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Dhcp_Lease.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Lease'
    return this
  }
}

export interface Config_Dhcp_LeasesData {
  collection_header?: CollectionHeaderData
  leases: Array<Config_Dhcp_LeaseData>
}

export class Config_Dhcp_Leases extends SerenityCollectionBase<Config_Dhcp_Leases> {
  static create(data, serenity: Serenity): Config_Dhcp_Leases {
    return lodash.assign(new Config_Dhcp_Leases(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  leases: Array<Config_Dhcp_Lease>
  forEachConfig_Dhcp_Lease(callbackfn: (x: Config_Dhcp_Lease) => void): Promise<void> {
    return forEachX<Config_Dhcp_Leases, Config_Dhcp_Lease>('leases', this, callbackfn)
  }
  getAllConfig_Dhcp_Leases(): Promise<Array<Config_Dhcp_Lease>> {
    return getAllX<Config_Dhcp_Leases, Config_Dhcp_Lease>('leases', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Leases'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Config_Dhcp_Leases.create)
    }
    if (this.leases) {
      this.leases = this.leases.map(item => Config_Dhcp_Lease.create(item, serenity))
    }
    return this
  }
}

export interface Config_Dhcp_ReservationData {
  address: IPv4
  mac: string
}

export interface Config_Dhcp_ReservationEditData {
  address: IPv4
  mac: string
}

export class Config_Dhcp_Reservation extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp_Reservation {
    return lodash.assign(new Config_Dhcp_Reservation(), data).build(serenity)
  }
  address: IPv4
  mac: string
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete': string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Dhcp_Reservation.create)
  }
  edit(data: Config_Dhcp_ReservationEditData) {
    return this._serenity.patchSimple<Config_Dhcp_Reservation, Config_Dhcp_ReservationEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Reservation'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_Dhcp_ReservationRequestData {
  mac: string
  address: IPv4
}

export class Config_Dhcp_ReservationRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp_ReservationRequest {
    return lodash.assign(new Config_Dhcp_ReservationRequest(), data).build(serenity)
  }
  mac: string
  address: IPv4
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_ReservationRequest'
    return this
  }
}

export interface Config_Dhcp_ReservationsData {
  collection_header?: CollectionHeaderData
  reservations: Array<Config_Dhcp_ReservationData>
}

export class Config_Dhcp_Reservations extends SerenityCollectionBase<Config_Dhcp_Reservations> {
  static create(data, serenity: Serenity): Config_Dhcp_Reservations {
    return lodash.assign(new Config_Dhcp_Reservations(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  reservations: Array<Config_Dhcp_Reservation>
  _links: {
    '/pelco/rel/add_reservation'?: string
  }
  postAddReservation(data: Config_Dhcp_ReservationRequestData, config?: PostRequestConfig) {
    let postData = Config_Dhcp_ReservationRequest.create(data, this._serenity)
    postData._type = 'Config.Dhcp_ReservationRequest'
    return this._serenity.postSimple<Config_Dhcp_ReservationRequest, Config_Dhcp_Reservation>(
      this._links['/pelco/rel/add_reservation'], postData, config, Config_Dhcp_Reservation.create
    )
  }
  forEachConfig_Dhcp_Reservation(callbackfn: (x: Config_Dhcp_Reservation) => void): Promise<void> {
    return forEachX<Config_Dhcp_Reservations, Config_Dhcp_Reservation>('reservations', this, callbackfn)
  }
  getAllConfig_Dhcp_Reservations(): Promise<Array<Config_Dhcp_Reservation>> {
    return getAllX<Config_Dhcp_Reservations, Config_Dhcp_Reservation>('reservations', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Reservations'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Config_Dhcp_Reservations.create)
    }
    if (this.reservations) {
      this.reservations = this.reservations.map(item => Config_Dhcp_Reservation.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_reservation'] === undefined) { this.postAddReservation = undefined }
    return this
  }
}

export interface Config_Dhcp_ScopeData {
  dns: Array<Host>
  gateway: IPv4
  lease_time: number
  name: string
  netmask: IPv4
  ranges: Array<IPv4Range>
  subnet: IPv4
}

export interface Config_Dhcp_ScopeEditData {
  dns: Array<Host>
  gateway: IPv4
  lease_time: number
  name: string
  netmask: IPv4
  ranges: Array<IPv4Range>
  subnet: IPv4
}

export class Config_Dhcp_Scope extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp_Scope {
    return lodash.assign(new Config_Dhcp_Scope(), data).build(serenity)
  }
  dns: Array<Host>
  gateway: IPv4
  lease_time: number
  name: string
  netmask: IPv4
  ranges: Array<IPv4Range>
  subnet: IPv4
  _limits: {
    lease_time: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete': string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Dhcp_Scope.create)
  }
  edit(data: Config_Dhcp_ScopeEditData) {
    return this._serenity.patchSimple<Config_Dhcp_Scope, Config_Dhcp_ScopeEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Scope'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_Dhcp_ScopeRequestData {
  dns: Array<Host>
  gateway: IPv4
  lease_time: number
  name: string
  netmask: IPv4
  ranges: Array<IPv4Range>
  subnet: IPv4
}

export interface Config_Dhcp_ScopeRequestEditData {
  ranges: Array<IPv4Range>
}

export class Config_Dhcp_ScopeRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Dhcp_ScopeRequest {
    return lodash.assign(new Config_Dhcp_ScopeRequest(), data).build(serenity)
  }
  dns: Array<Host>
  gateway: IPv4
  lease_time: number
  name: string
  netmask: IPv4
  ranges: Array<IPv4Range>
  subnet: IPv4
  _limits: {
    lease_time: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_ScopeRequest'
    return this
  }
}

export interface Config_Dhcp_ScopesData {
  collection_header?: CollectionHeaderData
  scopes: Array<Config_Dhcp_ScopeData>
}

export class Config_Dhcp_Scopes extends SerenityCollectionBase<Config_Dhcp_Scopes> {
  static create(data, serenity: Serenity): Config_Dhcp_Scopes {
    return lodash.assign(new Config_Dhcp_Scopes(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  scopes: Array<Config_Dhcp_Scope>
  _links: {
    '/pelco/rel/add_scope'?: string
  }
  postAddScope(data: Config_Dhcp_ScopeRequestData, config?: PostRequestConfig) {
    let postData = Config_Dhcp_ScopeRequest.create(data, this._serenity)
    postData._type = 'Config.Dhcp_ScopeRequest'
    return this._serenity.postSimple<Config_Dhcp_ScopeRequest, Config_Dhcp_Scope>(
      this._links['/pelco/rel/add_scope'], postData, config, Config_Dhcp_Scope.create
    )
  }
  forEachConfig_Dhcp_Scope(callbackfn: (x: Config_Dhcp_Scope) => void): Promise<void> {
    return forEachX<Config_Dhcp_Scopes, Config_Dhcp_Scope>('scopes', this, callbackfn)
  }
  getAllConfig_Dhcp_Scopes(): Promise<Array<Config_Dhcp_Scope>> {
    return getAllX<Config_Dhcp_Scopes, Config_Dhcp_Scope>('scopes', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Dhcp_Scopes'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Config_Dhcp_Scopes.create)
    }
    if (this.scopes) {
      this.scopes = this.scopes.map(item => Config_Dhcp_Scope.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_scope'] === undefined) { this.postAddScope = undefined }
    return this
  }
}

export interface Config_InterfaceData {
  address?: IPv4
  address_mode?: AddressMode
  address6?: Array<IPv6ap>
  address6_mode?: AddressMode
  dns?: Array<IPv4>
  dns6?: Array<IPv6>
  enabled?: boolean
  gateway?: IPv4
  gateway6?: IPv6
  id?: string
  mac: string
  name: string
  netmask?: IPv4
}

export interface Config_InterfaceEditData {
  address?: IPv4
  address_mode?: AddressMode
  address6?: Array<IPv6ap>
  address6_mode?: AddressMode
  dns?: Array<IPv4>
  dns6?: Array<IPv6>
  enabled?: boolean
  gateway?: IPv4
  gateway6?: IPv6
  netmask?: IPv4
}

export class Config_Interface extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Interface {
    return lodash.assign(new Config_Interface(), data).build(serenity)
  }
  address?: IPv4
  address_mode?: AddressMode
  address6?: Array<IPv6ap>
  address6_mode?: AddressMode
  dns?: Array<IPv4>
  dns6?: Array<IPv6>
  enabled?: boolean
  gateway?: IPv4
  gateway6?: IPv6
  id?: string
  mac: string
  name: string
  netmask?: IPv4
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Interface.create)
  }
  edit(data: Config_InterfaceEditData) {
    return this._serenity.patchSimple<Config_Interface, Config_InterfaceEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Interface'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_LdapData {
  base_dn: string
  enabled: boolean
  object_classes?: string
  search_dn?: string
  search_attributes: string
  server_name: Host
  server_port: number
  server_tls_enabled: boolean
}

export interface Config_LdapEditData {
  base_dn: string
  enabled: boolean
  object_classes?: string
  search_dn?: string
  search_dn_password?: string
  search_attributes: string
  server_name: Host
  server_port: number
  server_tls_enabled: boolean
}

export class Config_Ldap extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Ldap {
    return lodash.assign(new Config_Ldap(), data).build(serenity)
  }
  base_dn: string
  enabled: boolean
  object_classes?: string
  search_dn?: string
  search_dn_password?: string
  search_attributes: string
  server_name: Host
  server_port: number
  server_tls_enabled: boolean
  _limits: {
    server_port: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/server'?: string
    '/pelco/rel/validate': string
  }
  _embedded: {
    '/pelco/rel/server'?: Config_Ldap_Server
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Ldap.create)
  }
  edit(data: Config_LdapEditData) {
    return this._serenity.patchSimple<Config_Ldap, Config_LdapEditData>(this, data)
  }
  getServer(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/server'], { params: params }, Config_Ldap_Server.create)
  }
  postValidate(data: Config_Ldap_ValidationCredentialsData, config?: PostRequestConfig) {
    let postData = Config_Ldap_ValidationCredentials.create(data, this._serenity)
    postData._type = 'Config.Ldap_ValidationCredentials'
    return this._serenity.postSimple<Config_Ldap_ValidationCredentials, any>(
      this._links['/pelco/rel/validate'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Ldap'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/server'] === undefined) { this.getServer = undefined }
    return this
  }
}

export interface Config_Ldap_ServerData {
  certificate: string
}

export class Config_Ldap_Server extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Ldap_Server {
    return lodash.assign(new Config_Ldap_Server(), data).build(serenity)
  }
  certificate: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Ldap_Server'
    return this
  }
}

export interface Config_Ldap_ValidationCredentialsData {
  base_dn: string
  object_classes?: string
  password?: string
  search_dn?: string
  search_dn_password?: string
  search_attributes: string
  server_name: Host
  server_port: number
  server_tls_enabled: boolean
  user_name: string
}

export class Config_Ldap_ValidationCredentials extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Ldap_ValidationCredentials {
    return lodash.assign(new Config_Ldap_ValidationCredentials(), data).build(serenity)
  }
  base_dn: string
  object_classes?: string
  password?: string
  search_dn?: string
  search_dn_password?: string
  search_attributes: string
  server_name: Host
  server_port: number
  server_tls_enabled: boolean
  user_name: string
  _limits: {
    server_port: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Ldap_ValidationCredentials'
    return this
  }
}

export interface Config_NewVxArbiterData {
  host: Host
}

export class Config_NewVxArbiter extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_NewVxArbiter {
    return lodash.assign(new Config_NewVxArbiter(), data).build(serenity)
  }
  host: Host
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.NewVxArbiter'
    return this
  }
}

export interface Config_NewVxClusterData {
  aggregated_event_limit?: number
  external_time_server?: Host
  hosts: Array<Host>
  local_event_limit?: number
  mg_transcast?: MgTranscast
  vxcore_vip?: Host
  vxmg_vip?: Host
}

export class Config_NewVxCluster extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_NewVxCluster {
    return lodash.assign(new Config_NewVxCluster(), data).build(serenity)
  }
  aggregated_event_limit?: number
  external_time_server?: Host
  hosts: Array<Host>
  local_event_limit?: number
  mg_transcast?: MgTranscast
  vxcore_vip?: Host
  vxmg_vip?: Host
  _limits: {
    aggregated_event_limit?: Limit_Integer
    local_event_limit?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.NewVxCluster'
    return this
  }
}

export interface Config_NewVxNodesData {
  hosts: Array<Host>
}

export class Config_NewVxNodes extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_NewVxNodes {
    return lodash.assign(new Config_NewVxNodes(), data).build(serenity)
  }
  hosts: Array<Host>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.NewVxNodes'
    return this
  }
}

export interface Config_ServerData {
  http_port?: number
  https_port?: number
  rtsp_port?: number
}

export interface Config_ServerEditData {
  http_port?: number
  https_port?: number
  rtsp_port?: number
}

export class Config_Server extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Server {
    return lodash.assign(new Config_Server(), data).build(serenity)
  }
  http_port?: number
  https_port?: number
  rtsp_port?: number
  _limits: {
    http_port?: Limit_Integer
    https_port?: Limit_Integer
    rtsp_port?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/cert'?: string
    '/pelco/rel/reset_cert'?: string
    '/pelco/rel/set_cert'?: string
    '/pelco/rel/restart'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Server.create)
  }
  edit(data: Config_ServerEditData) {
    return this._serenity.patchSimple<Config_Server, Config_ServerEditData>(this, data)
  }
  postCert(data: CertRequestData, config?: PostRequestConfig) {
    let postData = CertRequest.create(data, this._serenity)
    postData._type = 'CertRequest'
    return this._serenity.postSimple<CertRequest, any>(
      this._links['/pelco/rel/cert'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Server'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/cert'] === undefined) { this.postCert = undefined }
    return this
  }
}

export interface Config_SnmpData {
  version: SnmpVersion
}

export interface Config_SnmpEditData {
  version: SnmpVersion
}

export class Config_Snmp extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Snmp {
    return lodash.assign(new Config_Snmp(), data).build(serenity)
  }
  version: SnmpVersion
  _links: {
    self: string
    edit?: string
    '/pelco/rel/snmp2c'?: string
    '/pelco/rel/snmp3'?: string
  }
  _embedded: {
    '/pelco/rel/snmp2c'?: Config_Snmp_2c
    '/pelco/rel/snmp3'?: Config_Snmp_3
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Snmp.create)
  }
  edit(data: Config_SnmpEditData) {
    return this._serenity.patchSimple<Config_Snmp, Config_SnmpEditData>(this, data)
  }
  getSnmp2c(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/snmp2c'], { params: params }, Config_Snmp_2c.create)
  }
  getSnmp3(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/snmp3'], { params: params }, Config_Snmp_3.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Snmp'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/snmp2c'] === undefined) { this.getSnmp2c = undefined }
    if (!this._links || this._links['/pelco/rel/snmp3'] === undefined) { this.getSnmp3 = undefined }
    return this
  }
}

export interface Config_Snmp_2cData {
  community_string: string
  trap_address?: Host
  trap_community_string: string
}

export interface Config_Snmp_2cEditData {
  community_string: string
  trap_address?: Host
  trap_community_string: string
}

export class Config_Snmp_2c extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Snmp_2c {
    return lodash.assign(new Config_Snmp_2c(), data).build(serenity)
  }
  community_string: string
  trap_address?: Host
  trap_community_string: string
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Snmp_2c.create)
  }
  edit(data: Config_Snmp_2cEditData) {
    return this._serenity.patchSimple<Config_Snmp_2c, Config_Snmp_2cEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Snmp_2c'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_Snmp_3Data {
  auth_protocol: AuthProtocol
  engine_id: string
  privacy_protocol: PrivacyProtocol
  trap_address?: Host
  user_name: string
}

export interface Config_Snmp_3EditData {
  auth_password?: string
  auth_protocol: AuthProtocol
  privacy_password?: string
  privacy_protocol: PrivacyProtocol
  trap_address?: Host
  user_name: string
}

export class Config_Snmp_3 extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Snmp_3 {
    return lodash.assign(new Config_Snmp_3(), data).build(serenity)
  }
  auth_password?: string
  auth_protocol: AuthProtocol
  engine_id: string
  privacy_password?: string
  privacy_protocol: PrivacyProtocol
  trap_address?: Host
  user_name: string
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Snmp_3.create)
  }
  edit(data: Config_Snmp_3EditData) {
    return this._serenity.patchSimple<Config_Snmp_3, Config_Snmp_3EditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Snmp_3'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_SshData {
  enabled: boolean
}

export interface Config_SshEditData {
  enabled: boolean
}

export class Config_Ssh extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Ssh {
    return lodash.assign(new Config_Ssh(), data).build(serenity)
  }
  enabled: boolean
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Ssh.create)
  }
  edit(data: Config_SshEditData) {
    return this._serenity.patchSimple<Config_Ssh, Config_SshEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Ssh'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Config_TimeData {
  external_time_server?: Host
  external_time_server_enabled?: boolean
  time: Date
}

export interface Config_TimeEditData {
  external_time_server?: Host
  external_time_server_enabled?: boolean
  time: Date
}

export class Config_Time extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Time {
    return lodash.assign(new Config_Time(), data).build(serenity)
  }
  external_time_server?: Host
  external_time_server_enabled?: boolean
  time: Date
  _links: {
    self: string
    edit?: string
    '/pelco/rel/external_time'?: string
    '/pelco/rel/set_timezone'?: string
    '/pelco/rel/timezone'?: string
    '/pelco/rel/timezones'?: string
  }
  _embedded: {
    '/pelco/rel/timezone'?: Config_Time_Zone
    '/pelco/rel/timezones'?: Config_Time_Zones
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_Time.create)
  }
  edit(data: Config_TimeEditData) {
    return this._serenity.patchSimple<Config_Time, Config_TimeEditData>(this, data)
  }
  postSetTimezone(data: Config_Time_ZoneData, config?: PostRequestConfig) {
    let postData = Config_Time_Zone.create(data, this._serenity)
    postData._type = 'Config.Time_Zone'
    return this._serenity.postSimple<Config_Time_Zone, any>(
      this._links['/pelco/rel/set_timezone'], postData, config
    )
  }
  getTimezone(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/timezone'], { params: params }, Config_Time_Zone.create)
  }
  getTimezones(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/timezones'], { params: params }, Config_Time_Zones.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Time'
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/set_timezone'] === undefined) { this.postSetTimezone = undefined }
    if (!this._links || this._links['/pelco/rel/timezone'] === undefined) { this.getTimezone = undefined }
    if (!this._links || this._links['/pelco/rel/timezones'] === undefined) { this.getTimezones = undefined }
    return this
  }
}

export interface Config_Time_ZoneData {
  custom: boolean
  dst_end?: Date
  dst_offset?: TimeOffset
  dst_start?: Date
  name: string
  utc_offset: TimeOffset
}

export class Config_Time_Zone extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Time_Zone {
    return lodash.assign(new Config_Time_Zone(), data).build(serenity)
  }
  custom: boolean
  dst_end?: Date
  dst_offset?: TimeOffset
  dst_start?: Date
  name: string
  utc_offset: TimeOffset
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Time_Zone'
    if (this.dst_end) {
      this.dst_end = new Date(this.dst_end)
    }
    if (this.dst_start) {
      this.dst_start = new Date(this.dst_start)
    }
    return this
  }
}

export interface Config_Time_ZonesData {
  zones: Array<Config_Time_ZoneData>
}

export class Config_Time_Zones extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_Time_Zones {
    return lodash.assign(new Config_Time_Zones(), data).build(serenity)
  }
  zones: Array<Config_Time_Zone>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.Time_Zones'
    if (this.zones) {
      this.zones = this.zones.map(item => Config_Time_Zone.create(item, serenity))
    }
    return this
  }
}

export interface Config_VxClusterData {
  aggregated_event_limit?: number
  db_password?: string
  discovery_vip?: Host
  export_path?: string
  export_path_enabled?: boolean
  export_path_password?: string
  export_path_username?: UPN
  local_event_limit?: number
  mg_transcast?: MgTranscast
  monitoring_location?: URI
  monitoring_password?: string
  monitoring_user_name?: string
  nodes: Array<Config_VxNodeData>
  replica_sets: number
  status: VxConfigStatus
  status_code?: number
  status_desc?: string
  vxcore_vip?: Host
  vxmg_vip?: Host
}

export interface Config_VxClusterEditData {
  aggregated_event_limit?: number
  discovery_vip?: Host
  export_path?: string
  export_path_enabled?: boolean
  export_path_password?: string
  export_path_username?: UPN
  local_event_limit?: number
  mg_transcast?: MgTranscast
  monitoring_location?: URI
  monitoring_password?: string
  monitoring_user_name?: string
  vxcore_vip?: Host
  vxmg_vip?: Host
}

export class Config_VxCluster extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_VxCluster {
    return lodash.assign(new Config_VxCluster(), data).build(serenity)
  }
  aggregated_event_limit?: number
  db_password?: string
  discovery_vip?: Host
  export_path?: string
  export_path_enabled?: boolean
  export_path_password?: string
  export_path_username?: UPN
  local_event_limit?: number
  mg_transcast?: MgTranscast
  monitoring_location?: URI
  monitoring_password?: string
  monitoring_user_name?: string
  nodes: Array<Config_VxNode>
  replica_sets: number
  status: VxConfigStatus
  status_code?: number
  status_desc?: string
  vxcore_vip?: Host
  vxmg_vip?: Host
  _limits: {
    aggregated_event_limit?: Limit_Integer
    local_event_limit?: Limit_Integer
    replica_sets: Limit_Integer
    status_code?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/add_nodes'?: string
    '/pelco/rel/backup'?: string
    '/pelco/rel/dbbackups'?: string
    '/pelco/rel/ldap'?: string
    '/pelco/rel/set_arbiter'?: string
    '/pelco/rel/set_config'?: string
    '/pelco/rel/time'?: string
    '/pelco/rel/validate_path'?: string
  }
  _embedded: {
    '/pelco/rel/dbbackups'?: DbBackups
    '/pelco/rel/ldap'?: Config_Ldap
    '/pelco/rel/time'?: Config_Time
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_VxCluster.create)
  }
  edit(data: Config_VxClusterEditData) {
    return this._serenity.patchSimple<Config_VxCluster, Config_VxClusterEditData>(this, data)
  }
  postAddNodes(data: Config_NewVxNodesData, config?: PostRequestConfig) {
    let postData = Config_NewVxNodes.create(data, this._serenity)
    postData._type = 'Config.NewVxNodes'
    return this._serenity.postSimple<Config_NewVxNodes, any>(
      this._links['/pelco/rel/add_nodes'], postData, config
    )
  }
  postBackup(data: Config_VxClusterBackupData, config?: PostRequestConfig) {
    let postData = Config_VxClusterBackup.create(data, this._serenity)
    postData._type = 'Config.VxClusterBackup'
    return this._serenity.postSimple<Config_VxClusterBackup, any>(
      this._links['/pelco/rel/backup'], postData, config
    )
  }
  getDbbackups(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/dbbackups'], { params: params }, DbBackups.create)
  }
  getLdap(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ldap'], { params: params }, Config_Ldap.create)
  }
  getTime(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/time'], { params: params }, Config_Time.create)
  }
  postValidatePath(data: NetworkStorageInfoData, config?: PostRequestConfig) {
    let postData = NetworkStorageInfo.create(data, this._serenity)
    postData._type = 'NetworkStorageInfo'
    return this._serenity.postSimple<NetworkStorageInfo, any>(
      this._links['/pelco/rel/validate_path'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.VxCluster'
    if (this.nodes) {
      this.nodes = this.nodes.map(item => Config_VxNode.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/add_nodes'] === undefined) { this.postAddNodes = undefined }
    if (!this._links || this._links['/pelco/rel/backup'] === undefined) { this.postBackup = undefined }
    if (!this._links || this._links['/pelco/rel/dbbackups'] === undefined) { this.getDbbackups = undefined }
    if (!this._links || this._links['/pelco/rel/ldap'] === undefined) { this.getLdap = undefined }
    if (!this._links || this._links['/pelco/rel/time'] === undefined) { this.getTime = undefined }
    if (!this._links || this._links['/pelco/rel/validate_path'] === undefined) { this.postValidatePath = undefined }
    return this
  }
}

export interface Config_VxClusterBackupData {
  completed?: Date
  initiated?: Date
  status: BackupStatus
}

export class Config_VxClusterBackup extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_VxClusterBackup {
    return lodash.assign(new Config_VxClusterBackup(), data).build(serenity)
  }
  completed?: Date
  initiated?: Date
  status: BackupStatus
  _links: {
    '/pelco/rel/halt'?: string
    '/pelco/rel/trigger'?: string
  }
  postTrigger(data: BackupRequestData, config?: PostRequestConfig) {
    let postData = BackupRequest.create(data, this._serenity)
    postData._type = 'BackupRequest'
    return this._serenity.postSimple<BackupRequest, any>(
      this._links['/pelco/rel/trigger'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.VxClusterBackup'
    if (this.completed) {
      this.completed = new Date(this.completed)
    }
    if (this.initiated) {
      this.initiated = new Date(this.initiated)
    }
    if (!this._links || this._links['/pelco/rel/trigger'] === undefined) { this.postTrigger = undefined }
    return this
  }
}

export interface Config_VxNodeData {
  arbiter_alias?: Host
  arbiter_port?: number
  config_server_aliases?: Array<Host>
  config_server_indices?: Array<number>
  config_server_ports?: Array<number>
  host: Host
  is_arbiter?: boolean
  mongod_alias?: Host
  mongod_available?: boolean
  mongod_id?: number
  mongod_port?: number
  mongos_available?: boolean
  mongos_port?: number
  replica_set_name?: string
  status: VxConfigStatus
  type?: VxNodeType
}

export class Config_VxNode extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_VxNode {
    return lodash.assign(new Config_VxNode(), data).build(serenity)
  }
  arbiter_alias?: Host
  arbiter_port?: number
  config_server_aliases?: Array<Host>
  config_server_indices?: Array<number>
  config_server_ports?: Array<number>
  host: Host
  is_arbiter?: boolean
  mongod_alias?: Host
  mongod_available?: boolean
  mongod_id?: number
  mongod_port?: number
  mongos_available?: boolean
  mongos_port?: number
  replica_set_name?: string
  status: VxConfigStatus
  type?: VxNodeType
  _limits: {
    arbiter_port?: Limit_Integer
    mongod_id?: Limit_Integer
    mongod_port?: Limit_Integer
    mongos_port?: Limit_Integer
  }
  _links: {
    self: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_VxNode.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.VxNode'
    return this
  }
}

export interface Config_VxStorageData {
  failover_enabled?: boolean
  failover_group?: Array<string>
  failover_monitor?: Array<string>
  manual_recording_timeout?: number
  retention_limit: number
  video_stream_source?: StreamSource
  xcast: XCast
}

export interface Config_VxStorageEditData {
  failover_enabled?: boolean
  failover_monitor?: Array<string>
  manual_recording_timeout?: number
  retention_limit: number
  video_stream_source?: StreamSource
  xcast: XCast
}

export class Config_VxStorage extends SerenityObjectBase {
  static create(data, serenity: Serenity): Config_VxStorage {
    return lodash.assign(new Config_VxStorage(), data).build(serenity)
  }
  failover_enabled?: boolean
  failover_group?: Array<string>
  failover_monitor?: Array<string>
  manual_recording_timeout?: number
  retention_limit: number
  video_stream_source?: StreamSource
  xcast: XCast
  _limits: {
    manual_recording_timeout?: Limit_Integer
    retention_limit: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/dbbackups'?: string
    '/pelco/rel/rebuild_db'?: string
    '/pelco/rel/set_failover_group'?: string
    '/pelco/rel/volume_groups'?: string
    '/pelco/rel/volumes'?: string
  }
  _embedded: {
    '/pelco/rel/dbbackups'?: DbBackups
    '/pelco/rel/volume_groups'?: VolumeGroups
    '/pelco/rel/volumes'?: Volumes
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Config_VxStorage.create)
  }
  edit(data: Config_VxStorageEditData) {
    return this._serenity.patchSimple<Config_VxStorage, Config_VxStorageEditData>(this, data)
  }
  getDbbackups(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/dbbackups'], { params: params }, DbBackups.create)
  }
  getVolumeGroups(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/volume_groups'], { params: params }, VolumeGroups.create)
  }
  getVolumes(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/volumes'], { params: params }, Volumes.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Config.VxStorage'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/dbbackups'] === undefined) { this.getDbbackups = undefined }
    if (!this._links || this._links['/pelco/rel/volume_groups'] === undefined) { this.getVolumeGroups = undefined }
    if (!this._links || this._links['/pelco/rel/volumes'] === undefined) { this.getVolumes = undefined }
    return this
  }
}

export interface CredentialsData {
  password?: string
  username?: UPN
}

export class Credentials extends SerenityObjectBase {
  static create(data, serenity: Serenity): Credentials {
    return lodash.assign(new Credentials(), data).build(serenity)
  }
  password?: string
  username?: UPN
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Credentials'
    return this
  }
}

export interface DataInterfaceData {
  bitrate?: number
  data_encoding_id?: string
  endpoint: string
  format?: StreamFormat
  framerate?: number
  multicast: boolean
  multicast_test_ip?: IP
  multicast_test_port?: number
  protocol: StreamProtocol
  render_type?: RenderType
  transcoded?: boolean
  x_resolution?: number
  y_resolution?: number
}

export class DataInterface extends SerenityObjectBase {
  static create(data, serenity: Serenity): DataInterface {
    return lodash.assign(new DataInterface(), data).build(serenity)
  }
  bitrate?: number
  data_encoding_id?: string
  endpoint: string
  format?: StreamFormat
  framerate?: number
  multicast: boolean
  multicast_test_ip?: IP
  multicast_test_port?: number
  protocol: StreamProtocol
  render_type?: RenderType
  transcoded?: boolean
  x_resolution?: number
  y_resolution?: number
  _limits: {
    bitrate?: Limit_Integer
    multicast_test_port?: Limit_Integer
    x_resolution?: Limit_Integer
    y_resolution?: Limit_Integer
  }
  _links: {
    '/pelco/rel/endpoint'?: string
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataInterface'
    return this
  }
}

export interface DataObjectData {
  client_type: string
  data: string
  id: string
  owner?: UPN
}

export interface DataObjectEditData {
  data: string
}

export class DataObject extends SerenityObjectBase {
  static create(data, serenity: Serenity): DataObject {
    return lodash.assign(new DataObject(), data).build(serenity)
  }
  client_type: string
  data: string
  id: string
  owner?: UPN
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DataObject.create)
  }
  edit(data: DataObjectEditData) {
    return this._serenity.patchSimple<DataObject, DataObjectEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataObject'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface DataObjectsData {
  collection_header?: CollectionHeaderData
  data_objects: Array<DataObjectData>
}

export class DataObjects extends SerenityCollectionBase<DataObjects> {
  static create(data, serenity: Serenity): DataObjects {
    return lodash.assign(new DataObjects(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  data_objects: Array<DataObject>
  _links: {
    '/pelco/rel/add_private_data'?: string
    '/pelco/rel/add_public_data'?: string
  }
  postAddPrivateData(data: NewDataObjectData, config?: PostRequestConfig) {
    let postData = NewDataObject.create(data, this._serenity)
    postData._type = 'NewDataObject'
    return this._serenity.postSimple<NewDataObject, DataObject>(
      this._links['/pelco/rel/add_private_data'], postData, config, DataObject.create
    )
  }
  postAddPublicData(data: NewDataObjectData, config?: PostRequestConfig) {
    let postData = NewDataObject.create(data, this._serenity)
    postData._type = 'NewDataObject'
    return this._serenity.postSimple<NewDataObject, DataObject>(
      this._links['/pelco/rel/add_public_data'], postData, config, DataObject.create
    )
  }
  forEachDataObject(callbackfn: (x: DataObject) => void): Promise<void> {
    return forEachX<DataObjects, DataObject>('data_objects', this, callbackfn)
  }
  getAllDataObjects(): Promise<Array<DataObject>> {
    return getAllX<DataObjects, DataObject>('data_objects', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataObjects'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DataObjects.create)
    }
    if (this.data_objects) {
      this.data_objects = this.data_objects.map(item => DataObject.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_private_data'] === undefined) { this.postAddPrivateData = undefined }
    if (!this._links || this._links['/pelco/rel/add_public_data'] === undefined) { this.postAddPublicData = undefined }
    return this
  }
}

export interface DataSessionData {
  data_interface: DataInterfaceData
  id: string
  quality?: number
  render_layout?: string
  speed?: number
  x_resolution?: number
  y_resolution?: number
}

export interface DataSessionEditData {
  quality?: number
  speed?: number
  time?: Date
  x_resolution?: number
  y_resolution?: number
}

export class DataSession extends SerenityObjectBase {
  static create(data, serenity: Serenity): DataSession {
    return lodash.assign(new DataSession(), data).build(serenity)
  }
  data_interface: DataInterface
  id: string
  quality?: number
  render_layout?: string
  speed?: number
  time?: Date
  x_resolution?: number
  y_resolution?: number
  _limits: {
    quality?: Limit_Integer
    x_resolution?: Limit_Integer
    y_resolution?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/data'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/data_source': string
    '/pelco/rel/live'?: string
    '/pelco/rel/refresh'?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/data'?: ArrayBuffer
    '/pelco/rel/data_source': DataSource
    '/pelco/rel/user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DataSession.create)
  }
  edit(data: DataSessionEditData) {
    return this._serenity.patchSimple<DataSession, DataSessionEditData>(this, data)
  }
  getData(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/data']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getDataSource(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_source'], { params: params }, DataSource.create)
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataSession'
    if (this.data_interface) {
      this.data_interface = DataInterface.create(this.data_interface, serenity)
    }
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/data'] === undefined) { this.getData = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface DataSessionsData {
  collection_header?: CollectionHeaderData
  data_sessions: Array<DataSessionData>
}

export class DataSessions extends SerenityCollectionBase<DataSessions> {
  static create(data, serenity: Serenity): DataSessions {
    return lodash.assign(new DataSessions(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  data_sessions: Array<DataSession>
  forEachDataSession(callbackfn: (x: DataSession) => void): Promise<void> {
    return forEachX<DataSessions, DataSession>('data_sessions', this, callbackfn)
  }
  getAllDataSessions(): Promise<Array<DataSession>> {
    return getAllX<DataSessions, DataSession>('data_sessions', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataSessions'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DataSessions.create)
    }
    if (this.data_sessions) {
      this.data_sessions = this.data_sessions.map(item => DataSession.create(item, serenity))
    }
    return this
  }
}

export interface DataSourceData {
  capturing?: boolean
  data_interfaces: Array<DataInterfaceData>
  enabled?: boolean
  id: string
  index?: number
  ip: IP
  live: boolean
  manual_recording?: boolean
  name?: string
  number?: number
  recorded: boolean
  recording?: boolean
  state: DeviceState
  type: DataSourceType
}

export interface DataSourceEditData {
  enabled?: boolean
  name?: string
  number?: number
}

export class DataSource extends SerenityObjectBase {
  static create(data, serenity: Serenity): DataSource {
    return lodash.assign(new DataSource(), data).build(serenity)
  }
  capturing?: boolean
  data_interfaces: Array<DataInterface>
  enabled?: boolean
  id: string
  index?: number
  ip: IP
  live: boolean
  manual_recording?: boolean
  name?: string
  number?: number
  recorded: boolean
  recording?: boolean
  state: DeviceState
  type: DataSourceType
  _limits: {
    index?: Limit_Integer
    number?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/all_data_storages'?: string
    '/pelco/rel/audio_rels'?: string
    '/pelco/rel/bookmarks'?: string
    '/pelco/rel/clips'?: string
    '/pelco/rel/data_sessions'?: string
    '/pelco/rel/data_storages'?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/edge_clips'?: string
    '/pelco/rel/gaps'?: string
    '/pelco/rel/member'?: string
    '/pelco/rel/multiview'?: string
    '/pelco/rel/ptz_controller'?: string
    '/pelco/rel/snapshot'?: string
    '/pelco/rel/tags'?: string
    '/pelco/rel/video_rels'?: string
  }
  _embedded: {
    '/pelco/rel/all_data_storages'?: DataStorages
    '/pelco/rel/audio_rels'?: ResourceRels
    '/pelco/rel/bookmarks'?: Bookmarks
    '/pelco/rel/clips'?: Clips
    '/pelco/rel/data_sessions'?: DataSessions
    '/pelco/rel/data_storages'?: DataStorages
    '/pelco/rel/device'?: Device
    '/pelco/rel/edge_clips'?: Clips
    '/pelco/rel/gaps'?: Gaps
    '/pelco/rel/member'?: Member
    '/pelco/rel/multiview'?: Multiview
    '/pelco/rel/ptz_controller'?: PtzController
    '/pelco/rel/snapshot'?: ArrayBuffer
    '/pelco/rel/tags'?: Tags
    '/pelco/rel/video_rels'?: ResourceRels
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DataSource.create)
  }
  edit(data: DataSourceEditData) {
    return this._serenity.patchSimple<DataSource, DataSourceEditData>(this, data)
  }
  getAllDataStorages(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/all_data_storages'], { params: params }, DataStorages.create)
  }
  getAudioRels(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/audio_rels'], { params: params }, ResourceRels.create)
  }
  getBookmarks(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/bookmarks'], { params: params }, Bookmarks.create)
  }
  getClips(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/clips'], { params: params }, Clips.create)
  }
  getDataSessions(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sessions'], { params: params }, DataSessions.create)
  }
  getDataStorages(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storages'], { params: params }, DataStorages.create)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getEdgeClips(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/edge_clips'], { params: params }, Clips.create)
  }
  getGaps(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/gaps'], { params: params }, Gaps.create)
  }
  getMember(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/member'], { params: params }, Member.create)
  }
  getMultiview(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/multiview'], { params: params }, Multiview.create)
  }
  getPtzController(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ptz_controller'], { params: params }, PtzController.create)
  }
  getSnapshot(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/snapshot']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  getTags(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/tags'], { params: params }, Tags.create)
  }
  getVideoRels(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/video_rels'], { params: params }, ResourceRels.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataSource'
    if (this.data_interfaces) {
      this.data_interfaces = this.data_interfaces.map(item => DataInterface.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/all_data_storages'] === undefined) { this.getAllDataStorages = undefined }
    if (!this._links || this._links['/pelco/rel/audio_rels'] === undefined) { this.getAudioRels = undefined }
    if (!this._links || this._links['/pelco/rel/bookmarks'] === undefined) { this.getBookmarks = undefined }
    if (!this._links || this._links['/pelco/rel/clips'] === undefined) { this.getClips = undefined }
    if (!this._links || this._links['/pelco/rel/data_sessions'] === undefined) { this.getDataSessions = undefined }
    if (!this._links || this._links['/pelco/rel/data_storages'] === undefined) { this.getDataStorages = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/edge_clips'] === undefined) { this.getEdgeClips = undefined }
    if (!this._links || this._links['/pelco/rel/gaps'] === undefined) { this.getGaps = undefined }
    if (!this._links || this._links['/pelco/rel/member'] === undefined) { this.getMember = undefined }
    if (!this._links || this._links['/pelco/rel/multiview'] === undefined) { this.getMultiview = undefined }
    if (!this._links || this._links['/pelco/rel/ptz_controller'] === undefined) { this.getPtzController = undefined }
    if (!this._links || this._links['/pelco/rel/snapshot'] === undefined) { this.getSnapshot = undefined }
    if (!this._links || this._links['/pelco/rel/tags'] === undefined) { this.getTags = undefined }
    if (!this._links || this._links['/pelco/rel/video_rels'] === undefined) { this.getVideoRels = undefined }
    return this
  }
}

export interface DataSourcesData {
  data_sources: Array<DataSourceData>
  collection_header?: CollectionHeaderData
}

export class DataSources extends SerenityCollectionBase<DataSources> {
  static create(data, serenity: Serenity): DataSources {
    return lodash.assign(new DataSources(), data).build(serenity)
  }
  data_sources: Array<DataSource>
  collection_header?: CollectionHeader
  forEachDataSource(callbackfn: (x: DataSource) => void): Promise<void> {
    return forEachX<DataSources, DataSource>('data_sources', this, callbackfn)
  }
  getAllDataSources(): Promise<Array<DataSource>> {
    return getAllX<DataSources, DataSource>('data_sources', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataSources'
    if (this.data_sources) {
      this.data_sources = this.data_sources.map(item => DataSource.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DataSources.create)
    }
    return this
  }
}

export interface DataStorageData {
  failover?: boolean
  id: string
  name?: string
  type: DataStorageType
}

export interface DataStorageEditData {
  name?: string
}

export class DataStorage extends SerenityObjectBase {
  static create(data, serenity: Serenity): DataStorage {
    return lodash.assign(new DataStorage(), data).build(serenity)
  }
  failover?: boolean
  id: string
  name?: string
  type: DataStorageType
  _links: {
    self: string
    edit?: string
    '/pelco/rel/add_clip'?: string
    '/pelco/rel/assign'?: string
    '/pelco/rel/assignments'?: string
    '/pelco/rel/data_sources'?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/drivers'?: string
    '/pelco/rel/unassign'?: string
  }
  _embedded: {
    '/pelco/rel/assignments'?: DeviceAssignments
    '/pelco/rel/data_sources'?: DataSources
    '/pelco/rel/device'?: Device
    '/pelco/rel/drivers'?: Drivers
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DataStorage.create)
  }
  edit(data: DataStorageEditData) {
    return this._serenity.patchSimple<DataStorage, DataStorageEditData>(this, data)
  }
  postAddClip(data: NewClipData, config?: PostRequestConfig) {
    let postData = NewClip.create(data, this._serenity)
    postData._type = 'NewClip'
    return this._serenity.postSimple<NewClip, Clip>(
      this._links['/pelco/rel/add_clip'], postData, config, Clip.create
    )
  }
  postAssign(data: NewDeviceAssignmentsData, config?: PostRequestConfig) {
    let postData = NewDeviceAssignments.create(data, this._serenity)
    postData._type = 'NewDeviceAssignments'
    return this._serenity.postSimple<NewDeviceAssignments, any>(
      this._links['/pelco/rel/assign'], postData, config
    )
  }
  getAssignments(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/assignments'], { params: params }, DeviceAssignments.create)
  }
  getDataSources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sources'], { params: params }, DataSources.create)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getDrivers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/drivers'], { params: params }, Drivers.create)
  }
  postUnassign(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unassign'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataStorage'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/add_clip'] === undefined) { this.postAddClip = undefined }
    if (!this._links || this._links['/pelco/rel/assign'] === undefined) { this.postAssign = undefined }
    if (!this._links || this._links['/pelco/rel/assignments'] === undefined) { this.getAssignments = undefined }
    if (!this._links || this._links['/pelco/rel/data_sources'] === undefined) { this.getDataSources = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/drivers'] === undefined) { this.getDrivers = undefined }
    if (!this._links || this._links['/pelco/rel/unassign'] === undefined) { this.postUnassign = undefined }
    return this
  }
}

export interface DataStoragesData {
  collection_header?: CollectionHeaderData
  data_storages: Array<DataStorageData>
}

export class DataStorages extends SerenityCollectionBase<DataStorages> {
  static create(data, serenity: Serenity): DataStorages {
    return lodash.assign(new DataStorages(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  data_storages: Array<DataStorage>
  forEachDataStorage(callbackfn: (x: DataStorage) => void): Promise<void> {
    return forEachX<DataStorages, DataStorage>('data_storages', this, callbackfn)
  }
  getAllDataStorages(): Promise<Array<DataStorage>> {
    return getAllX<DataStorages, DataStorage>('data_storages', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DataStorages'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DataStorages.create)
    }
    if (this.data_storages) {
      this.data_storages = this.data_storages.map(item => DataStorage.create(item, serenity))
    }
    return this
  }
}

export interface DbBackupData {
  completed?: Date
  initiated?: Date
  status: BackupStatus
  status_reason?: BackupStatusReason
}

export class DbBackup extends SerenityObjectBase {
  static create(data, serenity: Serenity): DbBackup {
    return lodash.assign(new DbBackup(), data).build(serenity)
  }
  completed?: Date
  initiated?: Date
  status: BackupStatus
  status_reason?: BackupStatusReason
  _links: {
    self: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/halt'?: string
    '/pelco/rel/restore'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DbBackup.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DbBackup'
    if (this.completed) {
      this.completed = new Date(this.completed)
    }
    if (this.initiated) {
      this.initiated = new Date(this.initiated)
    }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface DbBackupsData {
  backups: Array<DbBackupData>
  backup_interval?: number
  backup_time?: TimeOfDay
  collection_header?: CollectionHeaderData
  keep?: number
  password?: string
  path?: string
  username?: string
}

export interface DbBackupsEditData {
  backup_interval?: number
  backup_time?: TimeOfDay
  keep?: number
  password?: string
  path?: string
  username?: string
}

export class DbBackups extends SerenityCollectionBase<DbBackups> {
  static create(data, serenity: Serenity): DbBackups {
    return lodash.assign(new DbBackups(), data).build(serenity)
  }
  backups: Array<DbBackup>
  backup_interval?: number
  backup_time?: TimeOfDay
  collection_header?: CollectionHeader
  keep?: number
  password?: string
  path?: string
  username?: string
  _limits: {
    backup_interval?: Limit_Integer
    keep?: Limit_Integer
  }
  _links: {
    edit?: string
    '/pelco/rel/trigger'?: string
    '/pelco/rel/validate_path'?: string
  }
  edit(data: DbBackupsEditData) {
    return this._serenity.patchSimple<DbBackups, DbBackupsEditData>(this, data)
  }
  postValidatePath(data: NetworkStorageInfoData, config?: PostRequestConfig) {
    let postData = NetworkStorageInfo.create(data, this._serenity)
    postData._type = 'NetworkStorageInfo'
    return this._serenity.postSimple<NetworkStorageInfo, any>(
      this._links['/pelco/rel/validate_path'], postData, config
    )
  }
  forEachDbBackup(callbackfn: (x: DbBackup) => void): Promise<void> {
    return forEachX<DbBackups, DbBackup>('backups', this, callbackfn)
  }
  getAllDbBackups(): Promise<Array<DbBackup>> {
    return getAllX<DbBackups, DbBackup>('backups', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DbBackups'
    if (this.backups) {
      this.backups = this.backups.map(item => DbBackup.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DbBackups.create)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/validate_path'] === undefined) { this.postValidatePath = undefined }
    return this
  }
}

export interface DeviceData {
  base_version?: string
  commissioned: boolean
  ddid?: string
  id: string
  ip: IP
  license_required?: boolean
  model?: string
  name?: string
  password_key?: string
  pelco_hardware?: boolean
  serial?: string
  state: DeviceState
  status?: Array<DeviceStatus>
  type: DeviceType
  username?: string
  vendor?: string
  version?: string
  vip?: IP
}

export interface DeviceEditData {
  ip: IP
  name?: string
  password?: string
  username?: string
  version?: string
}

export class Device extends SerenityObjectBase {
  static create(data, serenity: Serenity): Device {
    return lodash.assign(new Device(), data).build(serenity)
  }
  base_version?: string
  commissioned: boolean
  ddid?: string
  id: string
  ip: IP
  license_required?: boolean
  model?: string
  name?: string
  password?: string
  password_key?: string
  pelco_hardware?: boolean
  serial?: string
  state: DeviceState
  status?: Array<DeviceStatus>
  type: DeviceType
  username?: string
  vendor?: string
  version?: string
  vip?: IP
  _links: {
    self: string
    edit?: string
    '/pelco/rel/assignments'?: string
    '/pelco/rel/alarm_inputs'?: string
    '/pelco/rel/configuration'?: string
    '/pelco/rel/data_sources'?: string
    '/pelco/rel/data_storage'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/diagnostic'?: string
    '/pelco/rel/license'?: string
    '/pelco/rel/logs'?: string
    '/pelco/rel/monitors'?: string
    '/pelco/rel/reboot'?: string
    '/pelco/rel/relay_outputs'?: string
    '/pelco/rel/reset'?: string
    '/pelco/rel/silence'?: string
  }
  _embedded: {
    '/pelco/rel/assignments'?: DeviceAssignments
    '/pelco/rel/alarm_inputs'?: AlarmInputs
    '/pelco/rel/configuration'?: Config
    '/pelco/rel/data_sources'?: DataSources
    '/pelco/rel/data_storage'?: DataStorage
    '/pelco/rel/diagnostic'?: Diagnostic
    '/pelco/rel/license'?: License
    '/pelco/rel/logs'?: Logs
    '/pelco/rel/monitors'?: Monitors
    '/pelco/rel/relay_outputs'?: RelayOutputs
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Device.create)
  }
  edit(data: DeviceEditData) {
    return this._serenity.patchSimple<Device, DeviceEditData>(this, data)
  }
  getAssignments(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/assignments'], { params: params }, DeviceAssignments.create)
  }
  getAlarmInputs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/alarm_inputs'], { params: params }, AlarmInputs.create)
  }
  getConfiguration(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/configuration'], { params: params }, Config.create)
  }
  getDataSources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sources'], { params: params }, DataSources.create)
  }
  getDataStorage(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storage'], { params: params }, DataStorage.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getDiagnostic(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/diagnostic'], { params: params }, Diagnostic.create)
  }
  getLicense(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/license'], { params: params }, License.create)
  }
  getLogs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/logs'], { params: params }, Logs.create)
  }
  getMonitors(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/monitors'], { params: params }, Monitors.create)
  }
  getRelayOutputs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/relay_outputs'], { params: params }, RelayOutputs.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Device'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/assignments'] === undefined) { this.getAssignments = undefined }
    if (!this._links || this._links['/pelco/rel/alarm_inputs'] === undefined) { this.getAlarmInputs = undefined }
    if (!this._links || this._links['/pelco/rel/configuration'] === undefined) { this.getConfiguration = undefined }
    if (!this._links || this._links['/pelco/rel/data_sources'] === undefined) { this.getDataSources = undefined }
    if (!this._links || this._links['/pelco/rel/data_storage'] === undefined) { this.getDataStorage = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/diagnostic'] === undefined) { this.getDiagnostic = undefined }
    if (!this._links || this._links['/pelco/rel/license'] === undefined) { this.getLicense = undefined }
    if (!this._links || this._links['/pelco/rel/logs'] === undefined) { this.getLogs = undefined }
    if (!this._links || this._links['/pelco/rel/monitors'] === undefined) { this.getMonitors = undefined }
    if (!this._links || this._links['/pelco/rel/relay_outputs'] === undefined) { this.getRelayOutputs = undefined }
    return this
  }
}

export interface DeviceAssignmentData {
  id: string
  data_source_ids: Array<string>
  driver_type?: string
  volume_group_id?: string
}

export interface DeviceAssignmentEditData {
  data_source_ids: Array<string>
  driver_type?: string
  volume_group_id?: string
}

export class DeviceAssignment extends SerenityObjectBase {
  static create(data, serenity: Serenity): DeviceAssignment {
    return lodash.assign(new DeviceAssignment(), data).build(serenity)
  }
  id: string
  data_source_ids: Array<string>
  driver_type?: string
  volume_group_id?: string
  _links: {
    self: string
    edit?: string
    '/pelco/rel/data_sources'?: string
    '/pelco/rel/data_storage'?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/driver'?: string
  }
  _embedded: {
    '/pelco/rel/data_sources'?: DataSources
    '/pelco/rel/data_storage'?: DataStorage
    '/pelco/rel/device'?: Device
    '/pelco/rel/driver'?: Driver
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DeviceAssignment.create)
  }
  edit(data: DeviceAssignmentEditData) {
    return this._serenity.patchSimple<DeviceAssignment, DeviceAssignmentEditData>(this, data)
  }
  getDataSources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sources'], { params: params }, DataSources.create)
  }
  getDataStorage(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storage'], { params: params }, DataStorage.create)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getDriver(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/driver'], { params: params }, Driver.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DeviceAssignment'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/data_sources'] === undefined) { this.getDataSources = undefined }
    if (!this._links || this._links['/pelco/rel/data_storage'] === undefined) { this.getDataStorage = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/driver'] === undefined) { this.getDriver = undefined }
    return this
  }
}

export interface DeviceAssignmentsData {
  assignments: Array<DeviceAssignmentData>
  collection_header?: CollectionHeaderData
}

export class DeviceAssignments extends SerenityCollectionBase<DeviceAssignments> {
  static create(data, serenity: Serenity): DeviceAssignments {
    return lodash.assign(new DeviceAssignments(), data).build(serenity)
  }
  assignments: Array<DeviceAssignment>
  collection_header?: CollectionHeader
  forEachDeviceAssignment(callbackfn: (x: DeviceAssignment) => void): Promise<void> {
    return forEachX<DeviceAssignments, DeviceAssignment>('assignments', this, callbackfn)
  }
  getAllDeviceAssignments(): Promise<Array<DeviceAssignment>> {
    return getAllX<DeviceAssignments, DeviceAssignment>('assignments', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DeviceAssignments'
    if (this.assignments) {
      this.assignments = this.assignments.map(item => DeviceAssignment.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(DeviceAssignments.create)
    }
    return this
  }
}

export interface DevicesData {
  collection_header?: CollectionHeaderData
  devices: Array<DeviceData>
}

export class Devices extends SerenityCollectionBase<Devices> {
  static create(data, serenity: Serenity): Devices {
    return lodash.assign(new Devices(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  devices: Array<Device>
  _links: {
    '/pelco/rel/add_device'?: string
    '/pelco/rel/auto_add_devices'?: string
    '/pelco/rel/search_status'?: string
  }
  _embedded: {
    '/pelco/rel/search_status'?: DeviceSearchStatus
  }
  postAddDevice(data: NewDeviceData, config?: PostRequestConfig) {
    let postData = NewDevice.create(data, this._serenity)
    postData._type = 'NewDevice'
    return this._serenity.postSimple<NewDevice, Device>(
      this._links['/pelco/rel/add_device'], postData, config, Device.create
    )
  }
  getSearchStatus(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/search_status'], { params: params }, DeviceSearchStatus.create)
  }
  forEachDevice(callbackfn: (x: Device) => void): Promise<void> {
    return forEachX<Devices, Device>('devices', this, callbackfn)
  }
  getAllDevices(): Promise<Array<Device>> {
    return getAllX<Devices, Device>('devices', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Devices'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Devices.create)
    }
    if (this.devices) {
      this.devices = this.devices.map(item => Device.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_device'] === undefined) { this.postAddDevice = undefined }
    if (!this._links || this._links['/pelco/rel/search_status'] === undefined) { this.getSearchStatus = undefined }
    return this
  }
}

export interface DeviceSearchStatusData {
  status?: SearchStatus
}

export class DeviceSearchStatus extends SerenityObjectBase {
  static create(data, serenity: Serenity): DeviceSearchStatus {
    return lodash.assign(new DeviceSearchStatus(), data).build(serenity)
  }
  status?: SearchStatus
  _links: {
    self: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, DeviceSearchStatus.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'DeviceSearchStatus'
    return this
  }
}

export interface DiagnosticData {
  assignments?: Diagnostic_AssignmentsData
  backup_power?: Array<Diagnostic_BackupPowerData>
  db?: Array<Diagnostic_DbData>
  events?: Diagnostic_EventsData
  fan?: Array<Diagnostic_FanData>
  hdd?: Array<Diagnostic_HddData>
  load?: Array<Diagnostic_LoadData>
  network?: Array<Diagnostic_NetworkData>
  power?: Array<Diagnostic_PowerData>
  retention?: Diagnostic_RetentionData
  storage?: Array<Diagnostic_StorageData>
  temp?: Array<Diagnostic_TempData>
}

export class Diagnostic extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic {
    return lodash.assign(new Diagnostic(), data).build(serenity)
  }
  assignments?: Diagnostic_Assignments
  backup_power?: Array<Diagnostic_BackupPower>
  db?: Array<Diagnostic_Db>
  events?: Diagnostic_Events
  fan?: Array<Diagnostic_Fan>
  hdd?: Array<Diagnostic_Hdd>
  load?: Array<Diagnostic_Load>
  network?: Array<Diagnostic_Network>
  power?: Array<Diagnostic_Power>
  retention?: Diagnostic_Retention
  storage?: Array<Diagnostic_Storage>
  temp?: Array<Diagnostic_Temp>
  _links: {
    self: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Diagnostic.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic'
    if (this.assignments) {
      this.assignments = Diagnostic_Assignments.create(this.assignments, serenity)
    }
    if (this.backup_power) {
      this.backup_power = this.backup_power.map(item => Diagnostic_BackupPower.create(item, serenity))
    }
    if (this.db) {
      this.db = this.db.map(item => Diagnostic_Db.create(item, serenity))
    }
    if (this.events) {
      this.events = Diagnostic_Events.create(this.events, serenity)
    }
    if (this.fan) {
      this.fan = this.fan.map(item => Diagnostic_Fan.create(item, serenity))
    }
    if (this.hdd) {
      this.hdd = this.hdd.map(item => Diagnostic_Hdd.create(item, serenity))
    }
    if (this.load) {
      this.load = this.load.map(item => Diagnostic_Load.create(item, serenity))
    }
    if (this.network) {
      this.network = this.network.map(item => Diagnostic_Network.create(item, serenity))
    }
    if (this.power) {
      this.power = this.power.map(item => Diagnostic_Power.create(item, serenity))
    }
    if (this.retention) {
      this.retention = Diagnostic_Retention.create(this.retention, serenity)
    }
    if (this.storage) {
      this.storage = this.storage.map(item => Diagnostic_Storage.create(item, serenity))
    }
    if (this.temp) {
      this.temp = this.temp.map(item => Diagnostic_Temp.create(item, serenity))
    }
    return this
  }
}

export interface Diagnostic_AssignmentsData {
  bitrate?: number
  data_sources?: number
  max_bitrate?: number
  max_data_sources?: number
}

export class Diagnostic_Assignments extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Assignments {
    return lodash.assign(new Diagnostic_Assignments(), data).build(serenity)
  }
  bitrate?: number
  data_sources?: number
  max_bitrate?: number
  max_data_sources?: number
  _limits: {
    data_sources?: Limit_Integer
    max_data_sources?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Assignments'
    return this
  }
}

export interface Diagnostic_BackupPowerData {
  enabled: boolean
  id: string
  remaining?: number
}

export class Diagnostic_BackupPower extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_BackupPower {
    return lodash.assign(new Diagnostic_BackupPower(), data).build(serenity)
  }
  enabled: boolean
  id: string
  remaining?: number
  _limits: {
    remaining?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.BackupPower'
    return this
  }
}

export interface Diagnostic_DbData {
  id: string
  status: DbStatus
  status_progress?: number
}

export class Diagnostic_Db extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Db {
    return lodash.assign(new Diagnostic_Db(), data).build(serenity)
  }
  id: string
  status: DbStatus
  status_progress?: number
  _limits: {
    status_progress?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Db'
    return this
  }
}

export interface Diagnostic_EventsData {
  event_rate?: number
}

export class Diagnostic_Events extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Events {
    return lodash.assign(new Diagnostic_Events(), data).build(serenity)
  }
  event_rate?: number
  _limits: {
    event_rate?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Events'
    return this
  }
}

export interface Diagnostic_FanData {
  id: string
  ok: boolean
  rpm?: number
}

export class Diagnostic_Fan extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Fan {
    return lodash.assign(new Diagnostic_Fan(), data).build(serenity)
  }
  id: string
  ok: boolean
  rpm?: number
  _limits: {
    rpm?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Fan'
    return this
  }
}

export interface Diagnostic_HddData {
  id: string
  ok: boolean
  model?: string
  status?: HddStatus
}

export class Diagnostic_Hdd extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Hdd {
    return lodash.assign(new Diagnostic_Hdd(), data).build(serenity)
  }
  id: string
  ok: boolean
  model?: string
  status?: HddStatus
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Hdd'
    return this
  }
}

export interface Diagnostic_LoadData {
  id: string
  percent: number
}

export class Diagnostic_Load extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Load {
    return lodash.assign(new Diagnostic_Load(), data).build(serenity)
  }
  id: string
  percent: number
  _limits: {
    percent: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Load'
    return this
  }
}

export interface Diagnostic_NetworkData {
  id: string
  bandwidth_total: number
  bandwidth_used: number
}

export class Diagnostic_Network extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Network {
    return lodash.assign(new Diagnostic_Network(), data).build(serenity)
  }
  id: string
  bandwidth_total: number
  bandwidth_used: number
  _limits: {
    bandwidth_total: Limit_Integer
    bandwidth_used: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Network'
    return this
  }
}

export interface Diagnostic_PowerData {
  id: string
  ok: boolean
}

export class Diagnostic_Power extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Power {
    return lodash.assign(new Diagnostic_Power(), data).build(serenity)
  }
  id: string
  ok: boolean
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Power'
    return this
  }
}

export interface Diagnostic_RetentionData {
  retention?: number
}

export class Diagnostic_Retention extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Retention {
    return lodash.assign(new Diagnostic_Retention(), data).build(serenity)
  }
  retention?: number
  _limits: {
    retention?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Retention'
    return this
  }
}

export interface Diagnostic_StorageData {
  id: string
  online: boolean
  total: number
  used: number
}

export class Diagnostic_Storage extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Storage {
    return lodash.assign(new Diagnostic_Storage(), data).build(serenity)
  }
  id: string
  online: boolean
  total: number
  used: number
  _limits: {
    total: Limit_Integer
    used: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Storage'
    return this
  }
}

export interface Diagnostic_TempData {
  id: string
  degrees: number
  threshold_high?: number
  threshold_low?: number
}

export class Diagnostic_Temp extends SerenityObjectBase {
  static create(data, serenity: Serenity): Diagnostic_Temp {
    return lodash.assign(new Diagnostic_Temp(), data).build(serenity)
  }
  id: string
  degrees: number
  threshold_high?: number
  threshold_low?: number
  _limits: {
    degrees: Limit_Integer
    threshold_high?: Limit_Integer
    threshold_low?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Diagnostic.Temp'
    return this
  }
}

export interface DrawingData {
  id: string
  name: string
}

export interface DrawingEditData {
  name: string
}

export class Drawing extends SerenityObjectBase {
  static create(data, serenity: Serenity): Drawing {
    return lodash.assign(new Drawing(), data).build(serenity)
  }
  id: string
  name: string
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/delete_heob'?: string
    '/pelco/rel/delete_image'?: string
    '/pelco/rel/heob'?: string
    '/pelco/rel/image'?: string
    '/pelco/rel/lock'?: string
    '/pelco/rel/markers'?: string
    '/pelco/rel/set_heob'?: string
    '/pelco/rel/set_image'?: string
    '/pelco/rel/set_lock'?: string
  }
  _embedded: {
    '/pelco/rel/heob'?: ArrayBuffer
    '/pelco/rel/image'?: ArrayBuffer
    '/pelco/rel/lock'?: ResourceLock
    '/pelco/rel/markers'?: Markers
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Drawing.create)
  }
  edit(data: DrawingEditData) {
    return this._serenity.patchSimple<Drawing, DrawingEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  deleteHeob() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete_heob'])
  }
  deleteImage() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete_image'])
  }
  getHeob(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/heob']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  getImage(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/image']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  getLock(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/lock'], { params: params }, ResourceLock.create)
  }
  getMarkers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/markers'], { params: params }, Markers.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Drawing'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/delete_heob'] === undefined) { this.deleteHeob = undefined }
    if (!this._links || this._links['/pelco/rel/delete_image'] === undefined) { this.deleteImage = undefined }
    if (!this._links || this._links['/pelco/rel/heob'] === undefined) { this.getHeob = undefined }
    if (!this._links || this._links['/pelco/rel/image'] === undefined) { this.getImage = undefined }
    if (!this._links || this._links['/pelco/rel/lock'] === undefined) { this.getLock = undefined }
    if (!this._links || this._links['/pelco/rel/markers'] === undefined) { this.getMarkers = undefined }
    return this
  }
}

export interface DrawingsData {
  collection_header?: CollectionHeaderData
  drawings: Array<DrawingData>
}

export interface DrawingsEditData {
  index?: Array<string>
}

export class Drawings extends SerenityCollectionBase<Drawings> {
  static create(data, serenity: Serenity): Drawings {
    return lodash.assign(new Drawings(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  drawings: Array<Drawing>
  index?: Array<string>
  _links: {
    edit?: string
    '/pelco/rel/add_drawing'?: string
  }
  edit(data: DrawingsEditData) {
    return this._serenity.patchSimple<Drawings, DrawingsEditData>(this, data)
  }
  postAddDrawing(data: NewDrawingData, config?: PostRequestConfig) {
    let postData = NewDrawing.create(data, this._serenity)
    postData._type = 'NewDrawing'
    return this._serenity.postSimple<NewDrawing, Drawing>(
      this._links['/pelco/rel/add_drawing'], postData, config, Drawing.create
    )
  }
  forEachDrawing(callbackfn: (x: Drawing) => void): Promise<void> {
    return forEachX<Drawings, Drawing>('drawings', this, callbackfn)
  }
  getAllDrawings(): Promise<Array<Drawing>> {
    return getAllX<Drawings, Drawing>('drawings', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Drawings'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Drawings.create)
    }
    if (this.drawings) {
      this.drawings = this.drawings.map(item => Drawing.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/add_drawing'] === undefined) { this.postAddDrawing = undefined }
    return this
  }
}

export interface DriverData {
  name: string
  type: string
  vendor: string
  version: string
}

export class Driver extends SerenityObjectBase {
  static create(data, serenity: Serenity): Driver {
    return lodash.assign(new Driver(), data).build(serenity)
  }
  name: string
  type: string
  vendor: string
  version: string
  _links: {
    self: string
    '/pelco/rel/data_storage'?: string
  }
  _embedded: {
    '/pelco/rel/data_storage'?: DataStorage
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Driver.create)
  }
  getDataStorage(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storage'], { params: params }, DataStorage.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Driver'
    if (!this._links || this._links['/pelco/rel/data_storage'] === undefined) { this.getDataStorage = undefined }
    return this
  }
}

export interface DriversData {
  collection_header?: CollectionHeaderData
  drivers: Array<DriverData>
}

export class Drivers extends SerenityCollectionBase<Drivers> {
  static create(data, serenity: Serenity): Drivers {
    return lodash.assign(new Drivers(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  drivers: Array<Driver>
  forEachDriver(callbackfn: (x: Driver) => void): Promise<void> {
    return forEachX<Drivers, Driver>('drivers', this, callbackfn)
  }
  getAllDrivers(): Promise<Array<Driver>> {
    return getAllX<Drivers, Driver>('drivers', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Drivers'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Drivers.create)
    }
    if (this.drivers) {
      this.drivers = this.drivers.map(item => Driver.create(item, serenity))
    }
    return this
  }
}

export interface ErrorData {
  code: string
  field?: string
  message?: string
  resource?: any
}

export class Error extends SerenityObjectBase {
  static create(data, serenity: Serenity): Error {
    return lodash.assign(new Error(), data).build(serenity)
  }
  code: string
  field?: string
  message?: string
  resource?: any
  _links: {
    '/pelco/rel/new_password'?: string
  }
  postNewPassword(data: NewPasswordRequestData, config?: PostRequestConfig) {
    let postData = NewPasswordRequest.create(data, this._serenity)
    postData._type = 'NewPasswordRequest'
    return this._serenity.postSimple<NewPasswordRequest, any>(
      this._links['/pelco/rel/new_password'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Error'
    if (!this._links || this._links['/pelco/rel/new_password'] === undefined) { this.postNewPassword = undefined }
    return this
  }
}

export interface EventData {
  ack_client_id?: string
  ack_client_name?: string
  ack_state: AckState
  ack_time: Date
  ack_user?: UPN
  audible_notify: boolean
  generator_device_id?: string
  generator_device_name?: string
  id: string
  initial?: boolean
  properties: any
  severity: number
  situation_type: SituationType
  source_client_id?: string
  source_device_id: string
  source_device_name?: string
  source_user_name?: UPN
  time: Date
  wakeup?: number
}

export class Event extends SerenityObjectBase {
  static create(data, serenity: Serenity): Event {
    return lodash.assign(new Event(), data).build(serenity)
  }
  ack_client_id?: string
  ack_client_name?: string
  ack_state: AckState
  ack_time: Date
  ack_user?: UPN
  audible_notify: boolean
  generator_device_id?: string
  generator_device_name?: string
  id: string
  initial?: boolean
  properties: any
  severity: number
  situation_type: SituationType
  source_client_id?: string
  source_device_id: string
  source_device_name?: string
  source_user_name?: UPN
  time: Date
  wakeup?: number
  _limits: {
    severity: Limit_Integer
    wakeup?: Limit_Integer
  }
  _links: {
    self?: string
    '/pelco/rel/ack'?: string
    '/pelco/rel/generator_device'?: string
    '/pelco/rel/resources'?: string
    '/pelco/rel/silence'?: string
    '/pelco/rel/situation'?: string
    '/pelco/rel/source_device'?: string
    '/pelco/rel/source_user'?: string
  }
  _embedded: {
    '/pelco/rel/generator_device'?: Device
    '/pelco/rel/resources'?: Resources
    '/pelco/rel/situation'?: Situation
    '/pelco/rel/source_device'?: Device
    '/pelco/rel/source_user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Event.create)
  }
  postAck(data: Event_AckData, config?: PostRequestConfig) {
    let postData = Event_Ack.create(data, this._serenity)
    postData._type = 'Event.Ack'
    return this._serenity.postSimple<Event_Ack, any>(
      this._links['/pelco/rel/ack'], postData, config
    )
  }
  getGeneratorDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/generator_device'], { params: params }, Device.create)
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  postSilence(data: Event_SilenceData, config?: PostRequestConfig) {
    let postData = Event_Silence.create(data, this._serenity)
    postData._type = 'Event.Silence'
    return this._serenity.postSimple<Event_Silence, any>(
      this._links['/pelco/rel/silence'], postData, config
    )
  }
  getSituation(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/situation'], { params: params }, Situation.create)
  }
  getSourceDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/source_device'], { params: params }, Device.create)
  }
  getSourceUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/source_user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Event'
    if (this.ack_time) {
      this.ack_time = new Date(this.ack_time)
    }
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (!this._links || this._links['self'] === undefined) { this.getSelf = undefined }
    if (!this._links || this._links['/pelco/rel/ack'] === undefined) { this.postAck = undefined }
    if (!this._links || this._links['/pelco/rel/generator_device'] === undefined) { this.getGeneratorDevice = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    if (!this._links || this._links['/pelco/rel/silence'] === undefined) { this.postSilence = undefined }
    if (!this._links || this._links['/pelco/rel/situation'] === undefined) { this.getSituation = undefined }
    if (!this._links || this._links['/pelco/rel/source_device'] === undefined) { this.getSourceDevice = undefined }
    if (!this._links || this._links['/pelco/rel/source_user'] === undefined) { this.getSourceUser = undefined }
    return this
  }
}

export interface Event_AckData {
}

export class Event_Ack extends SerenityObjectBase {
  static create(data, serenity: Serenity): Event_Ack {
    return lodash.assign(new Event_Ack(), data).build(serenity)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Event.Ack'
    return this
  }
}

export interface Event_SilenceData {
  wakeup: number
}

export class Event_Silence extends SerenityObjectBase {
  static create(data, serenity: Serenity): Event_Silence {
    return lodash.assign(new Event_Silence(), data).build(serenity)
  }
  wakeup: number
  _limits: {
    wakeup: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Event.Silence'
    return this
  }
}

export interface EventsData {
  collection_header?: CollectionHeaderData
  events: Array<EventData>
}

export class Events extends SerenityCollectionBase<Events> {
  static create(data, serenity: Serenity): Events {
    return lodash.assign(new Events(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  events: Array<Event>
  _links: {
    '/pelco/rel/add_client_event'?: string
    '/pelco/rel/add_client_event_2'?: string
    '/pelco/rel/add_event'?: string
  }
  postAddClientEvent(data: NewEventData, config?: PostRequestConfig) {
    let postData = NewEvent.create(data, this._serenity)
    postData._type = 'NewEvent'
    return this._serenity.postSimple<NewEvent, Event>(
      this._links['/pelco/rel/add_client_event'], postData, config, Event.create
    )
  }
  postAddClientEvent2(data: NewEventData, config?: PostRequestConfig) {
    let postData = NewEvent.create(data, this._serenity)
    postData._type = 'NewEvent'
    return this._serenity.postSimple<NewEvent, Event>(
      this._links['/pelco/rel/add_client_event_2'], postData, config, Event.create
    )
  }
  postAddEvent(data: NewEventData, config?: PostRequestConfig) {
    let postData = NewEvent.create(data, this._serenity)
    postData._type = 'NewEvent'
    return this._serenity.postSimple<NewEvent, Event>(
      this._links['/pelco/rel/add_event'], postData, config, Event.create
    )
  }
  forEachEvent(callbackfn: (x: Event) => void): Promise<void> {
    return forEachX<Events, Event>('events', this, callbackfn)
  }
  getAllEvents(): Promise<Array<Event>> {
    return getAllX<Events, Event>('events', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Events'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Events.create)
    }
    if (this.events) {
      this.events = this.events.map(item => Event.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_client_event'] === undefined) { this.postAddClientEvent = undefined }
    if (!this._links || this._links['/pelco/rel/add_client_event_2'] === undefined) { this.postAddClientEvent2 = undefined }
    if (!this._links || this._links['/pelco/rel/add_event'] === undefined) { this.postAddEvent = undefined }
    return this
  }
}

export interface EventSubscriptionData {
  endpoint: URI
  expires: number
  id: string
  situation_types?: Array<SituationType>
}

export class EventSubscription extends SerenityObjectBase {
  static create(data, serenity: Serenity): EventSubscription {
    return lodash.assign(new EventSubscription(), data).build(serenity)
  }
  endpoint: URI
  expires: number
  id: string
  situation_types?: Array<SituationType>
  _limits: {
    expires: Limit_Integer
  }
  _links: {
    self: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/refresh'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, EventSubscription.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'EventSubscription'
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface EventSubscriptionsData {
  collection_header?: CollectionHeaderData
  subscriptions: Array<EventSubscriptionData>
}

export class EventSubscriptions extends SerenityCollectionBase<EventSubscriptions> {
  static create(data, serenity: Serenity): EventSubscriptions {
    return lodash.assign(new EventSubscriptions(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  subscriptions: Array<EventSubscription>
  _links: {
    '/pelco/rel/add_subscription'?: string
  }
  postAddSubscription(data: NewEventSubscriptionData, config?: PostRequestConfig) {
    let postData = NewEventSubscription.create(data, this._serenity)
    postData._type = 'NewEventSubscription'
    return this._serenity.postSimple<NewEventSubscription, EventSubscription>(
      this._links['/pelco/rel/add_subscription'], postData, config, EventSubscription.create
    )
  }
  forEachEventSubscription(callbackfn: (x: EventSubscription) => void): Promise<void> {
    return forEachX<EventSubscriptions, EventSubscription>('subscriptions', this, callbackfn)
  }
  getAllEventSubscriptions(): Promise<Array<EventSubscription>> {
    return getAllX<EventSubscriptions, EventSubscription>('subscriptions', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'EventSubscriptions'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(EventSubscriptions.create)
    }
    if (this.subscriptions) {
      this.subscriptions = this.subscriptions.map(item => EventSubscription.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_subscription'] === undefined) { this.postAddSubscription = undefined }
    return this
  }
}

export interface ExportData {
  completed?: Date
  export_clips: Array<ExportClipData>
  export_path?: string
  format: ExportFormat
  id: string
  initiated: Date
  name?: string
  owner?: UPN
  percent_complete: number
  protected?: boolean
  remaining?: number
  size?: number
  status: ExportStatus
  status_reason?: ExportStatusReason
}

export interface ExportEditData {
  name?: string
}

export class Export extends SerenityObjectBase {
  static create(data, serenity: Serenity): Export {
    return lodash.assign(new Export(), data).build(serenity)
  }
  completed?: Date
  export_clips: Array<ExportClip>
  export_path?: string
  format: ExportFormat
  id: string
  initiated: Date
  name?: string
  owner?: UPN
  percent_complete: number
  protected?: boolean
  remaining?: number
  size?: number
  status: ExportStatus
  status_reason?: ExportStatusReason
  _limits: {
    remaining?: Limit_Integer
    size?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/data'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/password'?: string
    '/pelco/rel/restore'?: string
    '/pelco/rel/set_path_credentials'?: string
    '/pelco/rel/trash'?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/data'?: ArrayBuffer
    '/pelco/rel/password'?: Resource_String
    '/pelco/rel/user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Export.create)
  }
  edit(data: ExportEditData) {
    return this._serenity.patchSimple<Export, ExportEditData>(this, data)
  }
  getData(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/data']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getPassword(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/password'], { params: params }, Resource_String.create)
  }
  trash() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/trash'])
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Export'
    if (this.completed) {
      this.completed = new Date(this.completed)
    }
    if (this.export_clips) {
      this.export_clips = this.export_clips.map(item => ExportClip.create(item, serenity))
    }
    if (this.initiated) {
      this.initiated = new Date(this.initiated)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/data'] === undefined) { this.getData = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/password'] === undefined) { this.getPassword = undefined }
    if (!this._links || this._links['/pelco/rel/trash'] === undefined) { this.trash = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface ExportClipData {
  data_source_id: string
  end_time: Date
  id: string
  start_time: Date
}

export class ExportClip extends SerenityObjectBase {
  static create(data, serenity: Serenity): ExportClip {
    return lodash.assign(new ExportClip(), data).build(serenity)
  }
  data_source_id: string
  end_time: Date
  id: string
  start_time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ExportClip'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    return this
  }
}

export interface ExportPlayerData {
  arch: ArchType
  id: string
  os: OsType
  size: number
  version: string
}

export class ExportPlayer extends SerenityObjectBase {
  static create(data, serenity: Serenity): ExportPlayer {
    return lodash.assign(new ExportPlayer(), data).build(serenity)
  }
  arch: ArchType
  id: string
  os: OsType
  size: number
  version: string
  _limits: {
    size: Limit_Integer
  }
  _links: {
    self: string
    '/pelco/rel/data': string
  }
  _embedded: {
    '/pelco/rel/data': ArrayBuffer
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, ExportPlayer.create)
  }
  getData(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/data']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ExportPlayer'
    return this
  }
}

export interface ExportPlayersData {
  collection_header?: CollectionHeaderData
  export_players: Array<ExportPlayerData>
}

export class ExportPlayers extends SerenityCollectionBase<ExportPlayers> {
  static create(data, serenity: Serenity): ExportPlayers {
    return lodash.assign(new ExportPlayers(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  export_players: Array<ExportPlayer>
  forEachExportPlayer(callbackfn: (x: ExportPlayer) => void): Promise<void> {
    return forEachX<ExportPlayers, ExportPlayer>('export_players', this, callbackfn)
  }
  getAllExportPlayers(): Promise<Array<ExportPlayer>> {
    return getAllX<ExportPlayers, ExportPlayer>('export_players', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ExportPlayers'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(ExportPlayers.create)
    }
    if (this.export_players) {
      this.export_players = this.export_players.map(item => ExportPlayer.create(item, serenity))
    }
    return this
  }
}

export interface ExportsData {
  exports: Array<ExportData>
  collection_header?: CollectionHeaderData
}

export class Exports extends SerenityCollectionBase<Exports> {
  static create(data, serenity: Serenity): Exports {
    return lodash.assign(new Exports(), data).build(serenity)
  }
  exports: Array<Export>
  collection_header?: CollectionHeader
  _links: {
    '/pelco/rel/add_export'?: string
    '/pelco/rel/new_keys'?: string
  }
  postAddExport(data: NewExportData, config?: PostRequestConfig) {
    let postData = NewExport.create(data, this._serenity)
    postData._type = 'NewExport'
    return this._serenity.postSimple<NewExport, Export>(
      this._links['/pelco/rel/add_export'], postData, config, Export.create
    )
  }
  forEachExport(callbackfn: (x: Export) => void): Promise<void> {
    return forEachX<Exports, Export>('exports', this, callbackfn)
  }
  getAllExports(): Promise<Array<Export>> {
    return getAllX<Exports, Export>('exports', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Exports'
    if (this.exports) {
      this.exports = this.exports.map(item => Export.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Exports.create)
    }
    if (!this._links || this._links['/pelco/rel/add_export'] === undefined) { this.postAddExport = undefined }
    return this
  }
}

export interface FeatureData {
  activation_id?: string
  count?: number
  expiration?: Date
  id: string
  installation: Date
  name?: FeatureName
  pending: boolean
  used: number
  version?: string
}

export class Feature extends SerenityObjectBase {
  static create(data, serenity: Serenity): Feature {
    return lodash.assign(new Feature(), data).build(serenity)
  }
  activation_id?: string
  count?: number
  expiration?: Date
  id: string
  installation: Date
  name?: FeatureName
  pending: boolean
  used: number
  version?: string
  _limits: {
    count?: Limit_Integer
    used: Limit_Integer
  }
  _links: {
    self: string
    '/pelco/rel/capabilities'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/resources'?: string
  }
  _embedded: {
    '/pelco/rel/capabilities'?: string
    '/pelco/rel/resources'?: Resources
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Feature.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Feature'
    if (this.expiration) {
      this.expiration = new Date(this.expiration)
    }
    if (this.installation) {
      this.installation = new Date(this.installation)
    }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    return this
  }
}

export interface FloatingFeatureData {
  expires: number
  id: string
}

export class FloatingFeature extends SerenityObjectBase {
  static create(data, serenity: Serenity): FloatingFeature {
    return lodash.assign(new FloatingFeature(), data).build(serenity)
  }
  expires: number
  id: string
  _limits: {
    expires: Limit_Integer
  }
  _links: {
    self: string
    '/pelco/rel/feature'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/refresh'?: string
  }
  _embedded: {
    '/pelco/rel/feature'?: Feature
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, FloatingFeature.create)
  }
  getFeature(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/feature'], { params: params }, Feature.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postRefresh(data: Resource_IntegerData, config?: PostRequestConfig) {
    let postData = Resource_Integer.create(data, this._serenity)
    postData._type = 'Resource.Integer'
    return this._serenity.postSimple<Resource_Integer, any>(
      this._links['/pelco/rel/refresh'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'FloatingFeature'
    if (!this._links || this._links['/pelco/rel/feature'] === undefined) { this.getFeature = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/refresh'] === undefined) { this.postRefresh = undefined }
    return this
  }
}

export interface GapData {
  data_source_id: string
  data_storage_id?: string
  end_time: Date
  reason?: GapReason
  reason_data?: any
  start_time: Date
}

export class Gap extends SerenityObjectBase {
  static create(data, serenity: Serenity): Gap {
    return lodash.assign(new Gap(), data).build(serenity)
  }
  data_source_id: string
  data_storage_id?: string
  end_time: Date
  reason?: GapReason
  reason_data?: any
  start_time: Date
  _links: {
    '/pelco/rel/data_source'?: string
    '/pelco/rel/data_storage'?: string
  }
  _embedded: {
    '/pelco/rel/data_source'?: DataSource
    '/pelco/rel/data_storage'?: DataStorage
  }
  getDataSource(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_source'], { params: params }, DataSource.create)
  }
  getDataStorage(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storage'], { params: params }, DataStorage.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Gap'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    if (!this._links || this._links['/pelco/rel/data_source'] === undefined) { this.getDataSource = undefined }
    if (!this._links || this._links['/pelco/rel/data_storage'] === undefined) { this.getDataStorage = undefined }
    return this
  }
}

export interface GapsData {
  collection_header?: CollectionHeaderData
  gaps: Array<GapData>
}

export class Gaps extends SerenityCollectionBase<Gaps> {
  static create(data, serenity: Serenity): Gaps {
    return lodash.assign(new Gaps(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  gaps: Array<Gap>
  forEachGap(callbackfn: (x: Gap) => void): Promise<void> {
    return forEachX<Gaps, Gap>('gaps', this, callbackfn)
  }
  getAllGaps(): Promise<Array<Gap>> {
    return getAllX<Gaps, Gap>('gaps', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Gaps'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Gaps.create)
    }
    if (this.gaps) {
      this.gaps = this.gaps.map(item => Gap.create(item, serenity))
    }
    return this
  }
}

export interface LicenseData {
  company_name?: string
  features: Array<FeatureData>
  system_type: SystemType
}

export class License extends SerenityObjectBase {
  static create(data, serenity: Serenity): License {
    return lodash.assign(new License(), data).build(serenity)
  }
  company_name?: string
  features: Array<Feature>
  system_type: SystemType
  _links: {
    '/pelco/rel/add_floating_feature'?: string
    '/pelco/rel/add_activation'?: string
    '/pelco/rel/add_license'?: string
    '/pelco/rel/auto_activate'?: string
    '/pelco/rel/link'?: string
    '/pelco/rel/set_company'?: string
    '/pelco/rel/unlink'?: string
  }
  postAddFloatingFeature(data: NewFloatingFeatureData, config?: PostRequestConfig) {
    let postData = NewFloatingFeature.create(data, this._serenity)
    postData._type = 'NewFloatingFeature'
    return this._serenity.postSimple<NewFloatingFeature, any>(
      this._links['/pelco/rel/add_floating_feature'], postData, config
    )
  }
  postAddActivation(data: ActivationData, config?: PostRequestConfig) {
    let postData = Activation.create(data, this._serenity)
    postData._type = 'Activation'
    return this._serenity.postSimple<Activation, any>(
      this._links['/pelco/rel/add_activation'], postData, config
    )
  }
  postAutoActivate(data: AutoActivationData, config?: PostRequestConfig) {
    let postData = AutoActivation.create(data, this._serenity)
    postData._type = 'AutoActivation'
    return this._serenity.postSimple<AutoActivation, any>(
      this._links['/pelco/rel/auto_activate'], postData, config
    )
  }
  postLink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/link'], postData, config
    )
  }
  postSetCompany(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/set_company'], postData, config
    )
  }
  postUnlink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unlink'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'License'
    if (this.features) {
      this.features = this.features.map(item => Feature.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_floating_feature'] === undefined) { this.postAddFloatingFeature = undefined }
    if (!this._links || this._links['/pelco/rel/add_activation'] === undefined) { this.postAddActivation = undefined }
    if (!this._links || this._links['/pelco/rel/auto_activate'] === undefined) { this.postAutoActivate = undefined }
    if (!this._links || this._links['/pelco/rel/link'] === undefined) { this.postLink = undefined }
    if (!this._links || this._links['/pelco/rel/set_company'] === undefined) { this.postSetCompany = undefined }
    if (!this._links || this._links['/pelco/rel/unlink'] === undefined) { this.postUnlink = undefined }
    return this
  }
}

export interface Limit_BooleanData {
  default_value?: boolean
  field_name: string
  options?: Array<boolean>
}

export class Limit_Boolean extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_Boolean {
    return lodash.assign(new Limit_Boolean(), data).build(serenity)
  }
  default_value?: boolean
  field_name: string
  options?: Array<boolean>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.Boolean'
    return this
  }
}

export interface Limit_FloatData {
  default_value?: number
  field_name: string
  max?: number
  min?: number
}

export class Limit_Float extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_Float {
    return lodash.assign(new Limit_Float(), data).build(serenity)
  }
  default_value?: number
  field_name: string
  max?: number
  min?: number
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.Float'
    return this
  }
}

export interface Limit_IntegerData {
  default_value?: number
  field_name: string
  max?: number
  min?: number
}

export class Limit_Integer extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_Integer {
    return lodash.assign(new Limit_Integer(), data).build(serenity)
  }
  default_value?: number
  field_name: string
  max?: number
  min?: number
  _limits: {
    default_value?: Limit_Integer
    max?: Limit_Integer
    min?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.Integer'
    return this
  }
}

export interface Limit_ListData {
  field_name: string
  max_items?: number
  min_items?: number
}

export class Limit_List extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_List {
    return lodash.assign(new Limit_List(), data).build(serenity)
  }
  field_name: string
  max_items?: number
  min_items?: number
  _limits: {
    max_items?: Limit_Integer
    min_items?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.List'
    return this
  }
}

export interface Limit_ObjectData {
  field_name: string
}

export class Limit_Object extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_Object {
    return lodash.assign(new Limit_Object(), data).build(serenity)
  }
  field_name: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.Object'
    return this
  }
}

export interface Limit_StringData {
  default_value?: string
  field_name: string
  options?: Array<string>
}

export class Limit_String extends SerenityObjectBase {
  static create(data, serenity: Serenity): Limit_String {
    return lodash.assign(new Limit_String(), data).build(serenity)
  }
  default_value?: string
  field_name: string
  options?: Array<string>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Limit.String'
    return this
  }
}

export interface LogData {
  completed?: Date
  id: string
  initiated: Date
}

export class Log extends SerenityObjectBase {
  static create(data, serenity: Serenity): Log {
    return lodash.assign(new Log(), data).build(serenity)
  }
  completed?: Date
  id: string
  initiated: Date
  _links: {
    self: string
    '/pelco/rel/data'?: string
    '/pelco/rel/delete'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Log.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Log'
    if (this.completed) {
      this.completed = new Date(this.completed)
    }
    if (this.initiated) {
      this.initiated = new Date(this.initiated)
    }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface LogsData {
  collection_header?: CollectionHeaderData
  logs: Array<LogData>
}

export class Logs extends SerenityCollectionBase<Logs> {
  static create(data, serenity: Serenity): Logs {
    return lodash.assign(new Logs(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  logs: Array<Log>
  _links: {
    '/pelco/rel/add_log'?: string
  }
  postAddLog(data: NewLogData, config?: PostRequestConfig) {
    let postData = NewLog.create(data, this._serenity)
    postData._type = 'NewLog'
    return this._serenity.postSimple<NewLog, Log>(
      this._links['/pelco/rel/add_log'], postData, config, Log.create
    )
  }
  forEachLog(callbackfn: (x: Log) => void): Promise<void> {
    return forEachX<Logs, Log>('logs', this, callbackfn)
  }
  getAllLogs(): Promise<Array<Log>> {
    return getAllX<Logs, Log>('logs', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Logs'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Logs.create)
    }
    if (this.logs) {
      this.logs = this.logs.map(item => Log.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_log'] === undefined) { this.postAddLog = undefined }
    return this
  }
}

export interface ManualRecordingData {
  data_source_id: string
  id: string
  owner: UPN
  time?: Date
}

export class ManualRecording extends SerenityObjectBase {
  static create(data, serenity: Serenity): ManualRecording {
    return lodash.assign(new ManualRecording(), data).build(serenity)
  }
  data_source_id: string
  id: string
  owner: UPN
  time?: Date
  _links: {
    self: string
    '/pelco/rel/data_source'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/refresh'?: string
  }
  _embedded: {
    '/pelco/rel/data_source'?: DataSource
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, ManualRecording.create)
  }
  getDataSource(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_source'], { params: params }, DataSource.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ManualRecording'
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (!this._links || this._links['/pelco/rel/data_source'] === undefined) { this.getDataSource = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface ManualRecordingsData {
  collection_header?: CollectionHeaderData
  manual_recordings: Array<ManualRecordingData>
}

export class ManualRecordings extends SerenityCollectionBase<ManualRecordings> {
  static create(data, serenity: Serenity): ManualRecordings {
    return lodash.assign(new ManualRecordings(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  manual_recordings: Array<ManualRecording>
  _links: {
    '/pelco/rel/add_manual_recording'?: string
  }
  postAddManualRecording(data: NewManualRecordingData, config?: PostRequestConfig) {
    let postData = NewManualRecording.create(data, this._serenity)
    postData._type = 'NewManualRecording'
    return this._serenity.postSimple<NewManualRecording, ManualRecording>(
      this._links['/pelco/rel/add_manual_recording'], postData, config, ManualRecording.create
    )
  }
  forEachManualRecording(callbackfn: (x: ManualRecording) => void): Promise<void> {
    return forEachX<ManualRecordings, ManualRecording>('manual_recordings', this, callbackfn)
  }
  getAllManualRecordings(): Promise<Array<ManualRecording>> {
    return getAllX<ManualRecordings, ManualRecording>('manual_recordings', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ManualRecordings'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(ManualRecordings.create)
    }
    if (this.manual_recordings) {
      this.manual_recordings = this.manual_recordings.map(item => ManualRecording.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_manual_recording'] === undefined) { this.postAddManualRecording = undefined }
    return this
  }
}

export interface MarkerData {
  direction?: number
  id: string
  name?: string
  resource_ref?: ResourceRef
  x: number
  y: number
}

export interface MarkerEditData {
  direction?: number
  name?: string
  resource_ref?: ResourceRef
  x: number
  y: number
}

export class Marker extends SerenityObjectBase {
  static create(data, serenity: Serenity): Marker {
    return lodash.assign(new Marker(), data).build(serenity)
  }
  direction?: number
  id: string
  name?: string
  resource_ref?: ResourceRef
  x: number
  y: number
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/drawing'?: string
    '/pelco/rel/resource'?: string
  }
  _embedded: {
    '/pelco/rel/drawing'?: Drawing
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Marker.create)
  }
  edit(data: MarkerEditData) {
    return this._serenity.patchSimple<Marker, MarkerEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getDrawing(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/drawing'], { params: params }, Drawing.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Marker'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/drawing'] === undefined) { this.getDrawing = undefined }
    return this
  }
}

export interface MarkersData {
  collection_header?: CollectionHeaderData
  markers: Array<MarkerData>
}

export class Markers extends SerenityCollectionBase<Markers> {
  static create(data, serenity: Serenity): Markers {
    return lodash.assign(new Markers(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  markers: Array<Marker>
  _links: {
    '/pelco/rel/add_marker'?: string
    '/pelco/rel/na_resources'?: string
  }
  _embedded: {
    '/pelco/rel/na_resources'?: Resources
  }
  postAddMarker(data: NewMarkerData, config?: PostRequestConfig) {
    let postData = NewMarker.create(data, this._serenity)
    postData._type = 'NewMarker'
    return this._serenity.postSimple<NewMarker, Marker>(
      this._links['/pelco/rel/add_marker'], postData, config, Marker.create
    )
  }
  getNaResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/na_resources'], { params: params }, Resources.create)
  }
  forEachMarker(callbackfn: (x: Marker) => void): Promise<void> {
    return forEachX<Markers, Marker>('markers', this, callbackfn)
  }
  getAllMarkers(): Promise<Array<Marker>> {
    return getAllX<Markers, Marker>('markers', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Markers'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Markers.create)
    }
    if (this.markers) {
      this.markers = this.markers.map(item => Marker.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_marker'] === undefined) { this.postAddMarker = undefined }
    if (!this._links || this._links['/pelco/rel/na_resources'] === undefined) { this.getNaResources = undefined }
    return this
  }
}

export interface MemberData {
  bandwidth: number
  host: Host
  id: string
  name: string
  port: number
  rtsp_capability?: RtspCapability
  state: MemberState
  username: string
}

export interface MemberEditData {
  bandwidth: number
  host: Host
  password: string
  port: number
  rtsp_capability?: RtspCapability
  username: string
}

export class Member extends SerenityObjectBase {
  static create(data, serenity: Serenity): Member {
    return lodash.assign(new Member(), data).build(serenity)
  }
  bandwidth: number
  host: Host
  id: string
  name: string
  password: string
  port: number
  rtsp_capability?: RtspCapability
  state: MemberState
  username: string
  _limits: {
    bandwidth: Limit_Integer
    port: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/clips'?: string
    '/pelco/rel/data_sessions'?: string
    '/pelco/rel/data_sources'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/devices'?: string
    '/pelco/rel/drawings'?: string
    '/pelco/rel/exports'?: string
    '/pelco/rel/quicklog'?: string
    '/pelco/rel/quickreport'?: string
    '/pelco/rel/refresh'?: string
    '/pelco/rel/roles'?: string
    '/pelco/rel/users'?: string
  }
  _embedded: {
    '/pelco/rel/clips'?: Clips
    '/pelco/rel/data_sessions'?: DataSessions
    '/pelco/rel/data_sources'?: DataSources
    '/pelco/rel/devices'?: Devices
    '/pelco/rel/drawings'?: Drawings
    '/pelco/rel/exports'?: Exports
    '/pelco/rel/roles'?: Roles
    '/pelco/rel/users'?: Users
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Member.create)
  }
  edit(data: MemberEditData) {
    return this._serenity.patchSimple<Member, MemberEditData>(this, data)
  }
  getClips(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/clips'], { params: params }, Clips.create)
  }
  getDataSessions(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sessions'], { params: params }, DataSessions.create)
  }
  getDataSources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sources'], { params: params }, DataSources.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getDevices(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/devices'], { params: params }, Devices.create)
  }
  getDrawings(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/drawings'], { params: params }, Drawings.create)
  }
  getExports(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/exports'], { params: params }, Exports.create)
  }
  postQuicklog(data: NewQuickLogData, config?: PostRequestConfig) {
    let postData = NewQuickLog.create(data, this._serenity)
    postData._type = 'NewQuickLog'
    return this._serenity.postSimple<NewQuickLog, any>(
      this._links['/pelco/rel/quicklog'], postData, config
    )
  }
  postQuickreport(data: NewQuickReportData, config?: PostRequestConfig) {
    let postData = NewQuickReport.create(data, this._serenity)
    postData._type = 'NewQuickReport'
    return this._serenity.postSimple<NewQuickReport, any>(
      this._links['/pelco/rel/quickreport'], postData, config
    )
  }
  getRoles(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/roles'], { params: params }, Roles.create)
  }
  getUsers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/users'], { params: params }, Users.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Member'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/clips'] === undefined) { this.getClips = undefined }
    if (!this._links || this._links['/pelco/rel/data_sessions'] === undefined) { this.getDataSessions = undefined }
    if (!this._links || this._links['/pelco/rel/data_sources'] === undefined) { this.getDataSources = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/devices'] === undefined) { this.getDevices = undefined }
    if (!this._links || this._links['/pelco/rel/drawings'] === undefined) { this.getDrawings = undefined }
    if (!this._links || this._links['/pelco/rel/exports'] === undefined) { this.getExports = undefined }
    if (!this._links || this._links['/pelco/rel/quicklog'] === undefined) { this.postQuicklog = undefined }
    if (!this._links || this._links['/pelco/rel/quickreport'] === undefined) { this.postQuickreport = undefined }
    if (!this._links || this._links['/pelco/rel/roles'] === undefined) { this.getRoles = undefined }
    if (!this._links || this._links['/pelco/rel/users'] === undefined) { this.getUsers = undefined }
    return this
  }
}

export interface Member_ValidationCredentialsData {
  host: Host
  password: string
  port: number
}

export class Member_ValidationCredentials extends SerenityObjectBase {
  static create(data, serenity: Serenity): Member_ValidationCredentials {
    return lodash.assign(new Member_ValidationCredentials(), data).build(serenity)
  }
  host: Host
  password: string
  port: number
  _limits: {
    port: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Member.ValidationCredentials'
    return this
  }
}

export interface MembersData {
  collection_header?: CollectionHeaderData
  members: Array<MemberData>
}

export class Members extends SerenityCollectionBase<Members> {
  static create(data, serenity: Serenity): Members {
    return lodash.assign(new Members(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  members: Array<Member>
  _links: {
    '/pelco/rel/add_member'?: string
    '/pelco/rel/validate'?: string
  }
  postAddMember(data: NewMemberData, config?: PostRequestConfig) {
    let postData = NewMember.create(data, this._serenity)
    postData._type = 'NewMember'
    return this._serenity.postSimple<NewMember, Member>(
      this._links['/pelco/rel/add_member'], postData, config, Member.create
    )
  }
  postValidate(data: Member_ValidationCredentialsData, config?: PostRequestConfig) {
    let postData = Member_ValidationCredentials.create(data, this._serenity)
    postData._type = 'Member.ValidationCredentials'
    return this._serenity.postSimple<Member_ValidationCredentials, any>(
      this._links['/pelco/rel/validate'], postData, config
    )
  }
  forEachMember(callbackfn: (x: Member) => void): Promise<void> {
    return forEachX<Members, Member>('members', this, callbackfn)
  }
  getAllMembers(): Promise<Array<Member>> {
    return getAllX<Members, Member>('members', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Members'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Members.create)
    }
    if (this.members) {
      this.members = this.members.map(item => Member.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_member'] === undefined) { this.postAddMember = undefined }
    if (!this._links || this._links['/pelco/rel/validate'] === undefined) { this.postValidate = undefined }
    return this
  }
}

export interface MonitorData {
  cells?: Array<Monitor_CellData>
  id: string
  layout?: CellLayout
  name?: string
  number?: number
}

export interface MonitorEditData {
  layout?: CellLayout
  name?: string
  number?: number
}

export class Monitor extends SerenityObjectBase {
  static create(data, serenity: Serenity): Monitor {
    return lodash.assign(new Monitor(), data).build(serenity)
  }
  cells?: Array<Monitor_Cell>
  id: string
  layout?: CellLayout
  name?: string
  number?: number
  _limits: {
    number?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/contents'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/monitorwalls'?: string
    '/pelco/rel/snapshot'?: string
  }
  _embedded: {
    '/pelco/rel/contents'?: string
    '/pelco/rel/device'?: Device
    '/pelco/rel/monitorwalls'?: MonitorWalls
    '/pelco/rel/snapshot'?: ArrayBuffer
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Monitor.create)
  }
  edit(data: MonitorEditData) {
    return this._serenity.patchSimple<Monitor, MonitorEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getMonitorwalls(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/monitorwalls'], { params: params }, MonitorWalls.create)
  }
  getSnapshot(params?, live: boolean = false) {
    let url = this._links['/pelco/rel/snapshot']
    let getParams = { responseType: 'arraybuffer', headers: { Accept: 'image/jpeg' } }
    if (params) {
      getParams = lodash.assign(getParams, params)
    }
    if (live) {
      const now = new Date()
      url += `?now=${now.getTime()}`
    }
    return this._serenity.getSimple<ArrayBuffer>(url, getParams)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Monitor'
    if (this.cells) {
      this.cells = this.cells.map(item => Monitor_Cell.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/monitorwalls'] === undefined) { this.getMonitorwalls = undefined }
    if (!this._links || this._links['/pelco/rel/snapshot'] === undefined) { this.getSnapshot = undefined }
    return this
  }
}

export interface Monitor_CellData {
  data_source_id?: string
  index: number
  speed?: number
  time?: Date
  time_anchor?: Date
}

export interface Monitor_CellEditData {
  data_source_id?: string
  speed?: number
  time?: Date
}

export class Monitor_Cell extends SerenityObjectBase {
  static create(data, serenity: Serenity): Monitor_Cell {
    return lodash.assign(new Monitor_Cell(), data).build(serenity)
  }
  data_source_id?: string
  index: number
  speed?: number
  time?: Date
  time_anchor?: Date
  _limits: {
    index: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Monitor_Cell.create)
  }
  edit(data: Monitor_CellEditData) {
    return this._serenity.patchSimple<Monitor_Cell, Monitor_CellEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Monitor.Cell'
    if (this.time) {
      this.time = new Date(this.time)
    }
    if (this.time_anchor) {
      this.time_anchor = new Date(this.time_anchor)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface MonitorsData {
  collection_header?: CollectionHeaderData
  monitors: Array<MonitorData>
}

export class Monitors extends SerenityCollectionBase<Monitors> {
  static create(data, serenity: Serenity): Monitors {
    return lodash.assign(new Monitors(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  monitors: Array<Monitor>
  _links: {
    '/pelco/rel/add_monitor'?: string
  }
  postAddMonitor(data: NewMonitorData, config?: PostRequestConfig) {
    let postData = NewMonitor.create(data, this._serenity)
    postData._type = 'NewMonitor'
    return this._serenity.postSimple<NewMonitor, Monitor>(
      this._links['/pelco/rel/add_monitor'], postData, config, Monitor.create
    )
  }
  forEachMonitor(callbackfn: (x: Monitor) => void): Promise<void> {
    return forEachX<Monitors, Monitor>('monitors', this, callbackfn)
  }
  getAllMonitors(): Promise<Array<Monitor>> {
    return getAllX<Monitors, Monitor>('monitors', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Monitors'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Monitors.create)
    }
    if (this.monitors) {
      this.monitors = this.monitors.map(item => Monitor.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_monitor'] === undefined) { this.postAddMonitor = undefined }
    return this
  }
}

export interface MonitorWallData {
  id: string
  name: string
  positions: Array<MonitorPosition>
}

export interface MonitorWallEditData {
  name: string
}

export class MonitorWall extends SerenityObjectBase {
  static create(data, serenity: Serenity): MonitorWall {
    return lodash.assign(new MonitorWall(), data).build(serenity)
  }
  id: string
  name: string
  positions: Array<MonitorPosition>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/monitors'?: string
  }
  _embedded: {
    '/pelco/rel/monitors'?: Monitors
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, MonitorWall.create)
  }
  edit(data: MonitorWallEditData) {
    return this._serenity.patchSimple<MonitorWall, MonitorWallEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getMonitors(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/monitors'], { params: params }, Monitors.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'MonitorWall'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/monitors'] === undefined) { this.getMonitors = undefined }
    return this
  }
}

export interface MonitorWallsData {
  collection_header?: CollectionHeaderData
  monitor_walls: Array<MonitorWallData>
}

export class MonitorWalls extends SerenityCollectionBase<MonitorWalls> {
  static create(data, serenity: Serenity): MonitorWalls {
    return lodash.assign(new MonitorWalls(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  monitor_walls: Array<MonitorWall>
  _links: {
    '/pelco/rel/add_monitor_wall'?: string
  }
  postAddMonitorWall(data: NewMonitorWallData, config?: PostRequestConfig) {
    let postData = NewMonitorWall.create(data, this._serenity)
    postData._type = 'NewMonitorWall'
    return this._serenity.postSimple<NewMonitorWall, MonitorWall>(
      this._links['/pelco/rel/add_monitor_wall'], postData, config, MonitorWall.create
    )
  }
  forEachMonitorWall(callbackfn: (x: MonitorWall) => void): Promise<void> {
    return forEachX<MonitorWalls, MonitorWall>('monitor_walls', this, callbackfn)
  }
  getAllMonitorWalls(): Promise<Array<MonitorWall>> {
    return getAllX<MonitorWalls, MonitorWall>('monitor_walls', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'MonitorWalls'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(MonitorWalls.create)
    }
    if (this.monitor_walls) {
      this.monitor_walls = this.monitor_walls.map(item => MonitorWall.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_monitor_wall'] === undefined) { this.postAddMonitorWall = undefined }
    return this
  }
}

export interface MultiStatusData {
  responses: Array<ResourceResponseData>
}

export class MultiStatus extends SerenityObjectBase {
  static create(data, serenity: Serenity): MultiStatus {
    return lodash.assign(new MultiStatus(), data).build(serenity)
  }
  responses: Array<ResourceResponse>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'MultiStatus'
    if (this.responses) {
      this.responses = this.responses.map(item => ResourceResponse.create(item, serenity))
    }
    return this
  }
}

export interface MultiviewData {
  user_info?: Array<UserInfoData>
}

export class Multiview extends SerenityObjectBase {
  static create(data, serenity: Serenity): Multiview {
    return lodash.assign(new Multiview(), data).build(serenity)
  }
  user_info?: Array<UserInfo>
  _links: {
    self: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Multiview.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Multiview'
    if (this.user_info) {
      this.user_info = this.user_info.map(item => UserInfo.create(item, serenity))
    }
    return this
  }
}

export interface NetworkStorageInfoData {
  password?: string
  path?: string
  username?: UPN
}

export class NetworkStorageInfo extends SerenityObjectBase {
  static create(data, serenity: Serenity): NetworkStorageInfo {
    return lodash.assign(new NetworkStorageInfo(), data).build(serenity)
  }
  password?: string
  path?: string
  username?: UPN
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NetworkStorageInfo'
    return this
  }
}

export interface NewBookmarkData {
  data_source_id: string
  description?: string
  group_id?: string
  name?: string
  time: Date
}

export class NewBookmark extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewBookmark {
    return lodash.assign(new NewBookmark(), data).build(serenity)
  }
  data_source_id: string
  description?: string
  group_id?: string
  name?: string
  time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewBookmark'
    if (this.time) {
      this.time = new Date(this.time)
    }
    return this
  }
}

export interface NewClipData {
  data_source_id: string
  data_storage_id: string
  end_time: Date
  start_time: Date
}

export class NewClip extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewClip {
    return lodash.assign(new NewClip(), data).build(serenity)
  }
  data_source_id: string
  data_storage_id: string
  end_time: Date
  start_time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewClip'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    return this
  }
}

export interface NewDataObjectData {
  client_type: string
  data: string
}

export class NewDataObject extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDataObject {
    return lodash.assign(new NewDataObject(), data).build(serenity)
  }
  client_type: string
  data: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDataObject'
    return this
  }
}

export interface NewDataSourceData {
  id: string
  ip: IP
  name?: string
  number?: number
  rtsp_urls?: Array<URI>
  type: DataSourceType
}

export class NewDataSource extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDataSource {
    return lodash.assign(new NewDataSource(), data).build(serenity)
  }
  id: string
  ip: IP
  name?: string
  number?: number
  rtsp_urls?: Array<URI>
  type: DataSourceType
  _limits: {
    number?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDataSource'
    return this
  }
}

export interface NewDeviceData {
  auto_commission?: boolean
  base_version?: string
  data_storage_id?: string
  driver_type?: string
  id?: string
  ip: IP
  model?: string
  name?: string
  password?: string
  serial?: string
  type: DeviceType
  username?: string
  vendor?: string
  version?: string
  volume_group_id?: string
}

export class NewDevice extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDevice {
    return lodash.assign(new NewDevice(), data).build(serenity)
  }
  auto_commission?: boolean
  base_version?: string
  data_storage_id?: string
  driver_type?: string
  id?: string
  ip: IP
  model?: string
  name?: string
  password?: string
  serial?: string
  type: DeviceType
  username?: string
  vendor?: string
  version?: string
  volume_group_id?: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDevice'
    return this
  }
}

export interface NewDeviceAssignmentData {
  data_source_ids?: Array<string>
  device_id: string
  driver_type?: string
  volume_group_id?: string
}

export class NewDeviceAssignment extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDeviceAssignment {
    return lodash.assign(new NewDeviceAssignment(), data).build(serenity)
  }
  data_source_ids?: Array<string>
  device_id: string
  driver_type?: string
  volume_group_id?: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDeviceAssignment'
    return this
  }
}

export interface NewDeviceAssignmentsData {
  assignments: Array<NewDeviceAssignmentData>
  collection_header?: CollectionHeaderData
}

export class NewDeviceAssignments extends SerenityCollectionBase<NewDeviceAssignments> {
  static create(data, serenity: Serenity): NewDeviceAssignments {
    return lodash.assign(new NewDeviceAssignments(), data).build(serenity)
  }
  assignments: Array<NewDeviceAssignment>
  collection_header?: CollectionHeader
  forEachNewDeviceAssignment(callbackfn: (x: NewDeviceAssignment) => void): Promise<void> {
    return forEachX<NewDeviceAssignments, NewDeviceAssignment>('assignments', this, callbackfn)
  }
  getAllNewDeviceAssignments(): Promise<Array<NewDeviceAssignment>> {
    return getAllX<NewDeviceAssignments, NewDeviceAssignment>('assignments', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDeviceAssignments'
    if (this.assignments) {
      this.assignments = this.assignments.map(item => NewDeviceAssignment.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(NewDeviceAssignments.create)
    }
    return this
  }
}

export interface NewDigitalPtzPresetData {
  description?: string
  name: string
  x: number
  y: number
  z: number
}

export class NewDigitalPtzPreset extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDigitalPtzPreset {
    return lodash.assign(new NewDigitalPtzPreset(), data).build(serenity)
  }
  description?: string
  name: string
  x: number
  y: number
  z: number
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDigitalPtzPreset'
    return this
  }
}

export interface NewDrawingData {
  name: string
}

export class NewDrawing extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewDrawing {
    return lodash.assign(new NewDrawing(), data).build(serenity)
  }
  name: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewDrawing'
    return this
  }
}

export interface NewEventData {
  generator_device_id?: string
  id?: string
  properties?: any
  situation_type: SituationType
  source_device_id: string
  source_user_name?: UPN
  time: Date
}

export class NewEvent extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewEvent {
    return lodash.assign(new NewEvent(), data).build(serenity)
  }
  generator_device_id?: string
  id?: string
  properties?: any
  situation_type: SituationType
  source_device_id: string
  source_user_name?: UPN
  time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewEvent'
    if (this.time) {
      this.time = new Date(this.time)
    }
    return this
  }
}

export interface NewEventSubscriptionData {
  endpoint: URI
  password?: string
  situation_types?: Array<SituationType>
  username?: UPN
}

export class NewEventSubscription extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewEventSubscription {
    return lodash.assign(new NewEventSubscription(), data).build(serenity)
  }
  endpoint: URI
  password?: string
  situation_types?: Array<SituationType>
  username?: UPN
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewEventSubscription'
    return this
  }
}

export interface NewExportData {
  export_clips?: Array<NewExportClipData>
  format: ExportFormat
  name?: string
  protect?: string
}

export class NewExport extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewExport {
    return lodash.assign(new NewExport(), data).build(serenity)
  }
  export_clips?: Array<NewExportClip>
  format: ExportFormat
  name?: string
  protect?: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewExport'
    if (this.export_clips) {
      this.export_clips = this.export_clips.map(item => NewExportClip.create(item, serenity))
    }
    return this
  }
}

export interface NewExportClipData {
  data_encoding_id?: string
  data_source_id: string
  end_time: Date
  include_audio?: boolean
  start_time: Date
}

export class NewExportClip extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewExportClip {
    return lodash.assign(new NewExportClip(), data).build(serenity)
  }
  data_encoding_id?: string
  data_source_id: string
  end_time: Date
  include_audio?: boolean
  start_time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewExportClip'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    return this
  }
}

export interface NewFloatingFeatureData {
  expires: number
  name: FeatureName
}

export class NewFloatingFeature extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewFloatingFeature {
    return lodash.assign(new NewFloatingFeature(), data).build(serenity)
  }
  expires: number
  name: FeatureName
  _limits: {
    expires: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewFloatingFeature'
    return this
  }
}

export interface NewLockedBookmarkData {
  data_source_id: string
  description?: string
  end_time: Date
  group_id?: string
  name?: string
  start_time: Date
}

export class NewLockedBookmark extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewLockedBookmark {
    return lodash.assign(new NewLockedBookmark(), data).build(serenity)
  }
  data_source_id: string
  description?: string
  end_time: Date
  group_id?: string
  name?: string
  start_time: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewLockedBookmark'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    return this
  }
}

export interface NewLogData {
}

export class NewLog extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewLog {
    return lodash.assign(new NewLog(), data).build(serenity)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewLog'
    return this
  }
}

export interface NewManualRecordingData {
  data_source_id: string
  post_record?: number
  pre_record?: number
}

export class NewManualRecording extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewManualRecording {
    return lodash.assign(new NewManualRecording(), data).build(serenity)
  }
  data_source_id: string
  post_record?: number
  pre_record?: number
  _limits: {
    post_record?: Limit_Integer
    pre_record?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewManualRecording'
    return this
  }
}

export interface NewMarkerData {
  direction?: number
  name?: string
  resource_ref?: ResourceRef
  x: number
  y: number
}

export class NewMarker extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewMarker {
    return lodash.assign(new NewMarker(), data).build(serenity)
  }
  direction?: number
  name?: string
  resource_ref?: ResourceRef
  x: number
  y: number
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewMarker'
    return this
  }
}

export interface NewMemberData {
  bandwidth: number
  host: Host
  password: string
  port: number
  rtsp_capability?: RtspCapability
}

export class NewMember extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewMember {
    return lodash.assign(new NewMember(), data).build(serenity)
  }
  bandwidth: number
  host: Host
  password: string
  port: number
  rtsp_capability?: RtspCapability
  _limits: {
    bandwidth: Limit_Integer
    port: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewMember'
    return this
  }
}

export interface NewMjpegDataSessionData {
  quality?: number
  time?: Date
  x_resolution?: number
  y_resolution?: number
}

export class NewMjpegDataSession extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewMjpegDataSession {
    return lodash.assign(new NewMjpegDataSession(), data).build(serenity)
  }
  quality?: number
  time?: Date
  x_resolution?: number
  y_resolution?: number
  _limits: {
    quality?: Limit_Integer
    x_resolution?: Limit_Integer
    y_resolution?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewMjpegDataSession'
    if (this.time) {
      this.time = new Date(this.time)
    }
    return this
  }
}

export interface NewMonitorData {
  device_id: string
  layout?: CellLayout
  name?: string
  number?: number
}

export class NewMonitor extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewMonitor {
    return lodash.assign(new NewMonitor(), data).build(serenity)
  }
  device_id: string
  layout?: CellLayout
  name?: string
  number?: number
  _limits: {
    number?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewMonitor'
    return this
  }
}

export interface NewMonitorWallData {
  name: string
}

export interface NewMonitorWallEditData {
  name: string
}

export class NewMonitorWall extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewMonitorWall {
    return lodash.assign(new NewMonitorWall(), data).build(serenity)
  }
  name: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewMonitorWall'
    return this
  }
}

export interface NewNotificationData {
  role_ids: Array<string>
}

export class NewNotification extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewNotification {
    return lodash.assign(new NewNotification(), data).build(serenity)
  }
  role_ids: Array<string>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewNotification'
    return this
  }
}

export interface NewPasswordRequestData {
  new_password: SASLString
}

export class NewPasswordRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewPasswordRequest {
    return lodash.assign(new NewPasswordRequest(), data).build(serenity)
  }
  new_password: SASLString
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewPasswordRequest'
    return this
  }
}

export interface NewPrivilegeData {
  permission: PermissionID
  priority?: number
}

export class NewPrivilege extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewPrivilege {
    return lodash.assign(new NewPrivilege(), data).build(serenity)
  }
  permission: PermissionID
  priority?: number
  _limits: {
    priority?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewPrivilege'
    return this
  }
}

export interface NewPtzPresetData {
  index?: number
}

export class NewPtzPreset extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewPtzPreset {
    return lodash.assign(new NewPtzPreset(), data).build(serenity)
  }
  index?: number
  _limits: {
    index?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewPtzPreset'
    return this
  }
}

export interface NewQuickLogData {
}

export class NewQuickLog extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewQuickLog {
    return lodash.assign(new NewQuickLog(), data).build(serenity)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewQuickLog'
    return this
  }
}

export interface NewQuickReportData {
  contents: Array<ReportContent>
  end_time?: Date
  start_time?: Date
}

export class NewQuickReport extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewQuickReport {
    return lodash.assign(new NewQuickReport(), data).build(serenity)
  }
  contents: Array<ReportContent>
  end_time?: Date
  start_time?: Date
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewQuickReport'
    if (this.end_time) {
      this.end_time = new Date(this.end_time)
    }
    if (this.start_time) {
      this.start_time = new Date(this.start_time)
    }
    return this
  }
}

export interface NewRoleData {
  name: string
}

export class NewRole extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewRole {
    return lodash.assign(new NewRole(), data).build(serenity)
  }
  name: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewRole'
    return this
  }
}

export interface NewRuleData {
  enabled?: boolean
  name?: string
  number?: number
  script?: string
  timetable_ids?: Array<string>
  triggers?: Array<Rule_TriggerData>
}

export class NewRule extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewRule {
    return lodash.assign(new NewRule(), data).build(serenity)
  }
  enabled?: boolean
  name?: string
  number?: number
  script?: string
  timetable_ids?: Array<string>
  triggers?: Array<Rule_TriggerData>
  _limits: {
    number?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewRule'
    if (this.triggers) {
      this.triggers = this.triggers.map(item => Rule_Trigger.create(item, serenity))
    }
    return this
  }
}

export interface NewScheduleData {
  action: ScheduleAction
  all_data_sources?: boolean
  data_source_types?: Array<DataSourceType>
  enabled?: boolean
  id?: string
  name?: string
  schedule_triggers: Array<NewScheduleTriggerData>
}

export class NewSchedule extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewSchedule {
    return lodash.assign(new NewSchedule(), data).build(serenity)
  }
  action: ScheduleAction
  all_data_sources?: boolean
  data_source_types?: Array<DataSourceType>
  enabled?: boolean
  id?: string
  name?: string
  schedule_triggers: Array<NewScheduleTrigger>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewSchedule'
    if (this.schedule_triggers) {
      this.schedule_triggers = this.schedule_triggers.map(item => NewScheduleTrigger.create(item, serenity))
    }
    return this
  }
}

export interface NewScheduleTriggerData {
  daily_end_time?: TimeOfDay
  daily_start_time?: TimeOfDay
  event?: SituationType
  event_properties?: KVObject
  framerate?: RecordFramerate
  id?: string
  post_trigger?: number
  pre_trigger?: number
  recurrence?: RecurrenceType
  recur_monthly?: Array<number>
  recur_yearly?: Array<number>
  recur_weekly?: Array<number>
  timeout?: number
}

export class NewScheduleTrigger extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewScheduleTrigger {
    return lodash.assign(new NewScheduleTrigger(), data).build(serenity)
  }
  daily_end_time?: TimeOfDay
  daily_start_time?: TimeOfDay
  event?: SituationType
  event_properties?: KVObject
  framerate?: RecordFramerate
  id?: string
  post_trigger?: number
  pre_trigger?: number
  recurrence?: RecurrenceType
  recur_monthly?: Array<number>
  recur_yearly?: Array<number>
  recur_weekly?: Array<number>
  timeout?: number
  _limits: {
    post_trigger?: Limit_Integer
    pre_trigger?: Limit_Integer
    timeout?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewScheduleTrigger'
    return this
  }
}

export interface NewSituationData {
  ack_needed?: boolean
  audible_loop_delay?: number
  audible_notify?: boolean
  audible_play_count?: number
  auto_ack?: number
  expand_banner?: boolean
  log?: boolean
  name?: string
  notify?: boolean
  popup_banner?: boolean
  severity?: number
  snooze_intervals?: Array<number>
  source_device_id?: string
  type: SituationType
}

export class NewSituation extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewSituation {
    return lodash.assign(new NewSituation(), data).build(serenity)
  }
  ack_needed?: boolean
  audible_loop_delay?: number
  audible_notify?: boolean
  audible_play_count?: number
  auto_ack?: number
  expand_banner?: boolean
  log?: boolean
  name?: string
  notify?: boolean
  popup_banner?: boolean
  severity?: number
  snooze_intervals?: Array<number>
  source_device_id?: string
  type: SituationType
  _limits: {
    audible_loop_delay?: Limit_Integer
    audible_play_count?: Limit_Integer
    auto_ack?: Limit_Integer
    severity?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewSituation'
    return this
  }
}

export interface NewTagData {
  name: string
  resource_refs?: Array<ResourceRef>
}

export class NewTag extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewTag {
    return lodash.assign(new NewTag(), data).build(serenity)
  }
  name: string
  resource_refs?: Array<ResourceRef>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewTag'
    return this
  }
}

export interface NewTimeTableData {
  name: string
  weekly_time_ranges?: Array<TimeRange>
}

export class NewTimeTable extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewTimeTable {
    return lodash.assign(new NewTimeTable(), data).build(serenity)
  }
  name: string
  weekly_time_ranges?: Array<TimeRange>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewTimeTable'
    return this
  }
}

export interface NewUserData {
  change_password: boolean
  domain?: string
  employee_id?: string
  first_name?: string
  last_name?: string
  name: SASLString
  note?: string
  password: SASLString
  phone_numbers?: Array<PhoneNumber>
}

export class NewUser extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewUser {
    return lodash.assign(new NewUser(), data).build(serenity)
  }
  change_password: boolean
  domain?: string
  employee_id?: string
  first_name?: string
  last_name?: string
  name: SASLString
  note?: string
  password: SASLString
  phone_numbers?: Array<PhoneNumber>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewUser'
    return this
  }
}

export interface NewVolumeData {
  buffer?: number
  path: string
  reserve_bandwidth?: boolean
}

export class NewVolume extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewVolume {
    return lodash.assign(new NewVolume(), data).build(serenity)
  }
  buffer?: number
  path: string
  reserve_bandwidth?: boolean
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewVolume'
    return this
  }
}

export interface NewVolumeGroupData {
  archive?: boolean
  name: string
}

export class NewVolumeGroup extends SerenityObjectBase {
  static create(data, serenity: Serenity): NewVolumeGroup {
    return lodash.assign(new NewVolumeGroup(), data).build(serenity)
  }
  archive?: boolean
  name: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NewVolumeGroup'
    return this
  }
}

export interface NotificationData {
  id: string
  role_ids: Array<string>
}

export class Notification extends SerenityObjectBase {
  static create(data, serenity: Serenity): Notification {
    return lodash.assign(new Notification(), data).build(serenity)
  }
  id: string
  role_ids: Array<string>
  _links: {
    self: string
    '/pelco/rel/add_role'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/remove_role'?: string
    '/pelco/rel/roles'?: string
  }
  _embedded: {
    '/pelco/rel/roles'?: Roles
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Notification.create)
  }
  postAddRole(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/add_role'], postData, config
    )
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postRemoveRole(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/remove_role'], postData, config
    )
  }
  getRoles(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/roles'], { params: params }, Roles.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Notification'
    if (!this._links || this._links['/pelco/rel/add_role'] === undefined) { this.postAddRole = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/remove_role'] === undefined) { this.postRemoveRole = undefined }
    if (!this._links || this._links['/pelco/rel/roles'] === undefined) { this.getRoles = undefined }
    return this
  }
}

export interface NotificationRequestData {
  situation_types: Array<SituationType>
  user_notification: boolean
}

export class NotificationRequest extends SerenityObjectBase {
  static create(data, serenity: Serenity): NotificationRequest {
    return lodash.assign(new NotificationRequest(), data).build(serenity)
  }
  situation_types: Array<SituationType>
  user_notification: boolean
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'NotificationRequest'
    return this
  }
}

export interface NotificationsData {
  collection_header?: CollectionHeaderData
  notifications: Array<NotificationData>
}

export class Notifications extends SerenityCollectionBase<Notifications> {
  static create(data, serenity: Serenity): Notifications {
    return lodash.assign(new Notifications(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  notifications: Array<Notification>
  _links: {
    '/pelco/rel/add_notification'?: string
  }
  postAddNotification(data: NewNotificationData, config?: PostRequestConfig) {
    let postData = NewNotification.create(data, this._serenity)
    postData._type = 'NewNotification'
    return this._serenity.postSimple<NewNotification, Notification>(
      this._links['/pelco/rel/add_notification'], postData, config, Notification.create
    )
  }
  forEachNotification(callbackfn: (x: Notification) => void): Promise<void> {
    return forEachX<Notifications, Notification>('notifications', this, callbackfn)
  }
  getAllNotifications(): Promise<Array<Notification>> {
    return getAllX<Notifications, Notification>('notifications', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Notifications'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Notifications.create)
    }
    if (this.notifications) {
      this.notifications = this.notifications.map(item => Notification.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_notification'] === undefined) { this.postAddNotification = undefined }
    return this
  }
}

export interface PermissionSchemaData {
  group?: boolean
  name?: string
  permissions?: Array<PermissionSchemaData>
  restrictions?: Array<string>
}

export class PermissionSchema extends SerenityObjectBase {
  static create(data, serenity: Serenity): PermissionSchema {
    return lodash.assign(new PermissionSchema(), data).build(serenity)
  }
  group?: boolean
  name?: string
  permissions?: Array<PermissionSchema>
  restrictions?: Array<string>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PermissionSchema'
    if (this.permissions) {
      this.permissions = this.permissions.map(item => PermissionSchema.create(item, serenity))
    }
    return this
  }
}

export interface PrivilegeData {
  exclude_restricted?: boolean
  id: string
  permission: PermissionID
  priority?: number
  restricted?: boolean
}

export interface PrivilegeEditData {
  exclude_restricted?: boolean
  priority?: number
  restricted?: boolean
}

export class Privilege extends SerenityObjectBase {
  static create(data, serenity: Serenity): Privilege {
    return lodash.assign(new Privilege(), data).build(serenity)
  }
  exclude_restricted?: boolean
  id: string
  permission: PermissionID
  priority?: number
  restricted?: boolean
  _limits: {
    priority?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/link'?: string
    '/pelco/rel/na_resources'?: string
    '/pelco/rel/resources'?: string
    '/pelco/rel/unlink'?: string
  }
  _embedded: {
    '/pelco/rel/na_resources'?: Resources
    '/pelco/rel/resources'?: Resources
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Privilege.create)
  }
  edit(data: PrivilegeEditData) {
    return this._serenity.patchSimple<Privilege, PrivilegeEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postLink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/link'], postData, config
    )
  }
  getNaResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/na_resources'], { params: params }, Resources.create)
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  postUnlink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unlink'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Privilege'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/link'] === undefined) { this.postLink = undefined }
    if (!this._links || this._links['/pelco/rel/na_resources'] === undefined) { this.getNaResources = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    if (!this._links || this._links['/pelco/rel/unlink'] === undefined) { this.postUnlink = undefined }
    return this
  }
}

export interface PrivilegesData {
  collection_header?: CollectionHeaderData
  privileges: Array<PrivilegeData>
}

export class Privileges extends SerenityCollectionBase<Privileges> {
  static create(data, serenity: Serenity): Privileges {
    return lodash.assign(new Privileges(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  privileges: Array<Privilege>
  _links: {
    '/pelco/rel/add_privilege'?: string
  }
  postAddPrivilege(data: NewPrivilegeData, config?: PostRequestConfig) {
    let postData = NewPrivilege.create(data, this._serenity)
    postData._type = 'NewPrivilege'
    return this._serenity.postSimple<NewPrivilege, Privilege>(
      this._links['/pelco/rel/add_privilege'], postData, config, Privilege.create
    )
  }
  forEachPrivilege(callbackfn: (x: Privilege) => void): Promise<void> {
    return forEachX<Privileges, Privilege>('privileges', this, callbackfn)
  }
  getAllPrivileges(): Promise<Array<Privilege>> {
    return getAllX<Privileges, Privilege>('privileges', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Privileges'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Privileges.create)
    }
    if (this.privileges) {
      this.privileges = this.privileges.map(item => Privilege.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_privilege'] === undefined) { this.postAddPrivilege = undefined }
    return this
  }
}

export interface PtzControllerData {
  locked?: boolean
  lock_expire_time?: number
  vfocus?: number
  viris?: number
  vx?: number
  vy?: number
  vz?: number
  x?: number
  y?: number
  z?: number
}

export interface PtzControllerEditData {
  vfocus?: number
  viris?: number
  vx?: number
  vy?: number
  vz?: number
  x?: number
  y?: number
  z?: number
}

export class PtzController extends SerenityObjectBase {
  static create(data, serenity: Serenity): PtzController {
    return lodash.assign(new PtzController(), data).build(serenity)
  }
  locked?: boolean
  lock_expire_time?: number
  vfocus?: number
  viris?: number
  vx?: number
  vy?: number
  vz?: number
  x?: number
  y?: number
  z?: number
  _limits: {
    lock_expire_time?: Limit_Integer
    vfocus?: Limit_Integer
    viris?: Limit_Integer
    vx?: Limit_Integer
    vy?: Limit_Integer
    vz?: Limit_Integer
    x?: Limit_Integer
    y?: Limit_Integer
    z?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/patterns'?: string
    '/pelco/rel/presets'?: string
    '/pelco/rel/ptzlock'?: string
    '/pelco/rel/refresh'?: string
    '/pelco/rel/view_object'?: string
  }
  _embedded: {
    '/pelco/rel/patterns'?: PtzPatterns
    '/pelco/rel/presets'?: PtzPresets
    '/pelco/rel/ptzlock'?: PtzLock
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, PtzController.create)
  }
  edit(data: PtzControllerEditData) {
    return this._serenity.patchSimple<PtzController, PtzControllerEditData>(this, data)
  }
  getPatterns(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/patterns'], { params: params }, PtzPatterns.create)
  }
  getPresets(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/presets'], { params: params }, PtzPresets.create)
  }
  getPtzlock(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/ptzlock'], { params: params }, PtzLock.create)
  }
  postViewObject(data: PtzViewObjectData, config?: PostRequestConfig) {
    let postData = PtzViewObject.create(data, this._serenity)
    postData._type = 'PtzViewObject'
    return this._serenity.postSimple<PtzViewObject, any>(
      this._links['/pelco/rel/view_object'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzController'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/patterns'] === undefined) { this.getPatterns = undefined }
    if (!this._links || this._links['/pelco/rel/presets'] === undefined) { this.getPresets = undefined }
    if (!this._links || this._links['/pelco/rel/ptzlock'] === undefined) { this.getPtzlock = undefined }
    if (!this._links || this._links['/pelco/rel/view_object'] === undefined) { this.postViewObject = undefined }
    return this
  }
}

export interface PtzLockData {
  expire?: number
  id: string
  lock: boolean
  owner?: UPN
}

export interface PtzLockEditData {
  expire?: number
  lock: boolean
}

export class PtzLock extends SerenityObjectBase {
  static create(data, serenity: Serenity): PtzLock {
    return lodash.assign(new PtzLock(), data).build(serenity)
  }
  expire?: number
  id: string
  lock: boolean
  owner?: UPN
  _limits: {
    expire?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, PtzLock.create)
  }
  edit(data: PtzLockEditData) {
    return this._serenity.patchSimple<PtzLock, PtzLockEditData>(this, data)
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzLock'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface PtzPatternData {
  description?: string
  name: string
}

export class PtzPattern extends SerenityObjectBase {
  static create(data, serenity: Serenity): PtzPattern {
    return lodash.assign(new PtzPattern(), data).build(serenity)
  }
  description?: string
  name: string
  _links: {
    self: string
    '/pelco/rel/trigger'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, PtzPattern.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzPattern'
    return this
  }
}

export interface PtzPatternsData {
  collection_header?: CollectionHeaderData
  ptz_patterns: Array<PtzPatternData>
}

export class PtzPatterns extends SerenityCollectionBase<PtzPatterns> {
  static create(data, serenity: Serenity): PtzPatterns {
    return lodash.assign(new PtzPatterns(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  ptz_patterns: Array<PtzPattern>
  _links: {
    '/pelco/rel/halt'?: string
  }
  forEachPtzPattern(callbackfn: (x: PtzPattern) => void): Promise<void> {
    return forEachX<PtzPatterns, PtzPattern>('ptz_patterns', this, callbackfn)
  }
  getAllPtzPatterns(): Promise<Array<PtzPattern>> {
    return getAllX<PtzPatterns, PtzPattern>('ptz_patterns', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzPatterns'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(PtzPatterns.create)
    }
    if (this.ptz_patterns) {
      this.ptz_patterns = this.ptz_patterns.map(item => PtzPattern.create(item, serenity))
    }
    return this
  }
}

export interface PtzPresetData {
  description?: string
  digital?: boolean
  index?: number
  name: string
  x?: number
  y?: number
  z?: number
}

export class PtzPreset extends SerenityObjectBase {
  static create(data, serenity: Serenity): PtzPreset {
    return lodash.assign(new PtzPreset(), data).build(serenity)
  }
  description?: string
  digital?: boolean
  index?: number
  name: string
  x?: number
  y?: number
  z?: number
  _limits: {
    index?: Limit_Integer
  }
  _links: {
    self: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/trigger'?: string
    '/pelco/rel/reposition'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, PtzPreset.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzPreset'
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface PtzPresetsData {
  collection_header?: CollectionHeaderData
  ptz_presets: Array<PtzPresetData>
}

export class PtzPresets extends SerenityCollectionBase<PtzPresets> {
  static create(data, serenity: Serenity): PtzPresets {
    return lodash.assign(new PtzPresets(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  ptz_presets: Array<PtzPreset>
  _links: {
    '/pelco/rel/add_preset'?: string
    '/pelco/rel/add_digital_preset'?: string
    '/pelco/rel/trigger_preset'?: string
  }
  postAddPreset(data: NewPtzPresetData, config?: PostRequestConfig) {
    let postData = NewPtzPreset.create(data, this._serenity)
    postData._type = 'NewPtzPreset'
    return this._serenity.postSimple<NewPtzPreset, PtzPreset>(
      this._links['/pelco/rel/add_preset'], postData, config, PtzPreset.create
    )
  }
  postAddDigitalPreset(data: NewDigitalPtzPresetData, config?: PostRequestConfig) {
    let postData = NewDigitalPtzPreset.create(data, this._serenity)
    postData._type = 'NewDigitalPtzPreset'
    return this._serenity.postSimple<NewDigitalPtzPreset, PtzPreset>(
      this._links['/pelco/rel/add_digital_preset'], postData, config, PtzPreset.create
    )
  }
  postTriggerPreset(data: Resource_IntegerData, config?: PostRequestConfig) {
    let postData = Resource_Integer.create(data, this._serenity)
    postData._type = 'Resource.Integer'
    return this._serenity.postSimple<Resource_Integer, any>(
      this._links['/pelco/rel/trigger_preset'], postData, config
    )
  }
  forEachPtzPreset(callbackfn: (x: PtzPreset) => void): Promise<void> {
    return forEachX<PtzPresets, PtzPreset>('ptz_presets', this, callbackfn)
  }
  getAllPtzPresets(): Promise<Array<PtzPreset>> {
    return getAllX<PtzPresets, PtzPreset>('ptz_presets', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzPresets'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(PtzPresets.create)
    }
    if (this.ptz_presets) {
      this.ptz_presets = this.ptz_presets.map(item => PtzPreset.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_preset'] === undefined) { this.postAddPreset = undefined }
    if (!this._links || this._links['/pelco/rel/add_digital_preset'] === undefined) { this.postAddDigitalPreset = undefined }
    if (!this._links || this._links['/pelco/rel/trigger_preset'] === undefined) { this.postTriggerPreset = undefined }
    return this
  }
}

export interface PtzViewObjectData {
  x?: number
  y?: number
  z?: number
}

export class PtzViewObject extends SerenityObjectBase {
  static create(data, serenity: Serenity): PtzViewObject {
    return lodash.assign(new PtzViewObject(), data).build(serenity)
  }
  x?: number
  y?: number
  z?: number
  _limits: {
    x?: Limit_Integer
    y?: Limit_Integer
    z?: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'PtzViewObject'
    return this
  }
}

export interface QuickLogData {
  status: QuickLogStatus
}

export class QuickLog extends SerenityObjectBase {
  static create(data, serenity: Serenity): QuickLog {
    return lodash.assign(new QuickLog(), data).build(serenity)
  }
  status: QuickLogStatus
  _links: {
    self: string
    '/pelco/rel/data'?: string
  }
  _embedded: {
    '/pelco/rel/data'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, QuickLog.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'QuickLog'
    return this
  }
}

export interface QuickReportData {
  status: QuickReportStatus
}

export class QuickReport extends SerenityObjectBase {
  static create(data, serenity: Serenity): QuickReport {
    return lodash.assign(new QuickReport(), data).build(serenity)
  }
  status: QuickReportStatus
  _links: {
    self: string
    '/pelco/rel/data'?: string
    '/pelco/rel/delete'?: string
  }
  _embedded: {
    '/pelco/rel/data'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, QuickReport.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'QuickReport'
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface RelayOutputData {
  description?: string
  id: string
  name?: string
  state?: RelayState
}

export interface RelayOutputEditData {
  description?: string
  name?: string
}

export class RelayOutput extends SerenityObjectBase {
  static create(data, serenity: Serenity): RelayOutput {
    return lodash.assign(new RelayOutput(), data).build(serenity)
  }
  description?: string
  id: string
  name?: string
  state?: RelayState
  _links: {
    self: string
    edit?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/trigger'?: string
  }
  _embedded: {
    '/pelco/rel/device'?: Device
    '/pelco/rel/trigger'?: RelayTrigger
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, RelayOutput.create)
  }
  edit(data: RelayOutputEditData) {
    return this._serenity.patchSimple<RelayOutput, RelayOutputEditData>(this, data)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getTrigger(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/trigger'], { params: params }, RelayTrigger.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'RelayOutput'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/trigger'] === undefined) { this.getTrigger = undefined }
    return this
  }
}

export interface RelayOutputsData {
  relay_outputs: Array<RelayOutputData>
  collection_header?: CollectionHeaderData
}

export class RelayOutputs extends SerenityCollectionBase<RelayOutputs> {
  static create(data, serenity: Serenity): RelayOutputs {
    return lodash.assign(new RelayOutputs(), data).build(serenity)
  }
  relay_outputs: Array<RelayOutput>
  collection_header?: CollectionHeader
  forEachRelayOutput(callbackfn: (x: RelayOutput) => void): Promise<void> {
    return forEachX<RelayOutputs, RelayOutput>('relay_outputs', this, callbackfn)
  }
  getAllRelayOutputs(): Promise<Array<RelayOutput>> {
    return getAllX<RelayOutputs, RelayOutput>('relay_outputs', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'RelayOutputs'
    if (this.relay_outputs) {
      this.relay_outputs = this.relay_outputs.map(item => RelayOutput.create(item, serenity))
    }
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(RelayOutputs.create)
    }
    return this
  }
}

export interface RelayTriggerData {
  state?: RelayState
}

export interface RelayTriggerEditData {
  state?: RelayState
}

export class RelayTrigger extends SerenityObjectBase {
  static create(data, serenity: Serenity): RelayTrigger {
    return lodash.assign(new RelayTrigger(), data).build(serenity)
  }
  state?: RelayState
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, RelayTrigger.create)
  }
  edit(data: RelayTriggerEditData) {
    return this._serenity.patchSimple<RelayTrigger, RelayTriggerEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'RelayTrigger'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface Resource_BooleanData {
  value: boolean
}

export class Resource_Boolean extends SerenityObjectBase {
  static create(data, serenity: Serenity): Resource_Boolean {
    return lodash.assign(new Resource_Boolean(), data).build(serenity)
  }
  value: boolean
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resource.Boolean'
    return this
  }
}

export interface Resource_IntegerData {
  value: number
}

export class Resource_Integer extends SerenityObjectBase {
  static create(data, serenity: Serenity): Resource_Integer {
    return lodash.assign(new Resource_Integer(), data).build(serenity)
  }
  value: number
  _limits: {
    value: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resource.Integer'
    return this
  }
}

export interface Resource_ResourceRefData {
  value: ResourceRef
}

export class Resource_ResourceRef extends SerenityObjectBase {
  static create(data, serenity: Serenity): Resource_ResourceRef {
    return lodash.assign(new Resource_ResourceRef(), data).build(serenity)
  }
  value: ResourceRef
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resource.ResourceRef'
    return this
  }
}

export interface Resource_ResourceRefsData {
  value: Array<ResourceRef>
}

export class Resource_ResourceRefs extends SerenityObjectBase {
  static create(data, serenity: Serenity): Resource_ResourceRefs {
    return lodash.assign(new Resource_ResourceRefs(), data).build(serenity)
  }
  value: Array<ResourceRef>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resource.ResourceRefs'
    return this
  }
}

export interface Resource_StringData {
  value: string
}

export class Resource_String extends SerenityObjectBase {
  static create(data, serenity: Serenity): Resource_String {
    return lodash.assign(new Resource_String(), data).build(serenity)
  }
  value: string
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resource.String'
    return this
  }
}

export interface ResourceLockData {
  id: string
  owner: UPN
}

export class ResourceLock extends SerenityObjectBase {
  static create(data, serenity: Serenity): ResourceLock {
    return lodash.assign(new ResourceLock(), data).build(serenity)
  }
  id: string
  owner: UPN
  _links: {
    '/pelco/rel/delete'?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/user'?: User
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ResourceLock'
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface ResourceRelData {
  linked: boolean
  resource_ref: ResourceRef
}

export interface ResourceRelEditData {
  linked: boolean
}

export class ResourceRel extends SerenityObjectBase {
  static create(data, serenity: Serenity): ResourceRel {
    return lodash.assign(new ResourceRel(), data).build(serenity)
  }
  linked: boolean
  resource_ref: ResourceRef
  _links: {
    self: string
    edit?: string
    '/pelco/rel/resource'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, ResourceRel.create)
  }
  edit(data: ResourceRelEditData) {
    return this._serenity.patchSimple<ResourceRel, ResourceRelEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ResourceRel'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface ResourceRelsData {
  collection_header?: CollectionHeaderData
  resource_rels: Array<ResourceRelData>
}

export class ResourceRels extends SerenityCollectionBase<ResourceRels> {
  static create(data, serenity: Serenity): ResourceRels {
    return lodash.assign(new ResourceRels(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  resource_rels: Array<ResourceRel>
  forEachResourceRel(callbackfn: (x: ResourceRel) => void): Promise<void> {
    return forEachX<ResourceRels, ResourceRel>('resource_rels', this, callbackfn)
  }
  getAllResourceRels(): Promise<Array<ResourceRel>> {
    return getAllX<ResourceRels, ResourceRel>('resource_rels', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ResourceRels'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(ResourceRels.create)
    }
    if (this.resource_rels) {
      this.resource_rels = this.resource_rels.map(item => ResourceRel.create(item, serenity))
    }
    return this
  }
}

export interface ResourceResponseData {
  resource?: any
  status: number
}

export class ResourceResponse extends SerenityObjectBase {
  static create(data, serenity: Serenity): ResourceResponse {
    return lodash.assign(new ResourceResponse(), data).build(serenity)
  }
  resource?: any
  status: number
  _limits: {
    status: Limit_Integer
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ResourceResponse'
    return this
  }
}

export interface ResourcesData {
  collection_header?: CollectionHeaderData
  resources: Array<any>
}

export class Resources extends SerenityCollectionBase<Resources> {
  static create(data, serenity: Serenity): Resources {
    return lodash.assign(new Resources(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  resources: Array<any>
  forEachany(callbackfn: (x: any) => void): Promise<void> {
    return forEachX<Resources, any>('resources', this, callbackfn)
  }
  getAllResources(): Promise<Array<any>> {
    return getAllX<Resources, any>('resources', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Resources'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Resources.create)
    }
    return this
  }
}

export interface RoleData {
  id: string
  internal: boolean
  name: string
}

export interface RoleEditData {
  name: string
}

export class Role extends SerenityObjectBase {
  static create(data, serenity: Serenity): Role {
    return lodash.assign(new Role(), data).build(serenity)
  }
  id: string
  internal: boolean
  name: string
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/privileges'?: string
    '/pelco/rel/users'?: string
  }
  _embedded: {
    '/pelco/rel/privileges'?: Privileges
    '/pelco/rel/users'?: Users
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Role.create)
  }
  edit(data: RoleEditData) {
    return this._serenity.patchSimple<Role, RoleEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getPrivileges(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/privileges'], { params: params }, Privileges.create)
  }
  getUsers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/users'], { params: params }, Users.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Role'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/privileges'] === undefined) { this.getPrivileges = undefined }
    if (!this._links || this._links['/pelco/rel/users'] === undefined) { this.getUsers = undefined }
    return this
  }
}

export interface RolesData {
  collection_header?: CollectionHeaderData
  roles: Array<RoleData>
}

export class Roles extends SerenityCollectionBase<Roles> {
  static create(data, serenity: Serenity): Roles {
    return lodash.assign(new Roles(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  roles: Array<Role>
  _links: {
    '/pelco/rel/add_role'?: string
    '/pelco/rel/permission_schema': string
  }
  _embedded: {
    '/pelco/rel/permission_schema': PermissionSchema
  }
  postAddRole(data: NewRoleData, config?: PostRequestConfig) {
    let postData = NewRole.create(data, this._serenity)
    postData._type = 'NewRole'
    return this._serenity.postSimple<NewRole, Role>(
      this._links['/pelco/rel/add_role'], postData, config, Role.create
    )
  }
  getPermissionSchema(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/permission_schema'], { params: params }, PermissionSchema.create)
  }
  forEachRole(callbackfn: (x: Role) => void): Promise<void> {
    return forEachX<Roles, Role>('roles', this, callbackfn)
  }
  getAllRoles(): Promise<Array<Role>> {
    return getAllX<Roles, Role>('roles', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Roles'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Roles.create)
    }
    if (this.roles) {
      this.roles = this.roles.map(item => Role.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_role'] === undefined) { this.postAddRole = undefined }
    return this
  }
}

export interface RuleData {
  enabled?: boolean
  id: string
  name?: string
  number?: number
  script?: string
  timetable_ids?: Array<string>
  triggers?: Array<Rule_TriggerData>
}

export interface RuleEditData {
  enabled?: boolean
  name?: string
  number?: number
  script?: string
  timetable_ids?: Array<string>
  triggers?: Array<Rule_TriggerData>
}

export class Rule extends SerenityObjectBase {
  static create(data, serenity: Serenity): Rule {
    return lodash.assign(new Rule(), data).build(serenity)
  }
  enabled?: boolean
  id: string
  name?: string
  number?: number
  script?: string
  timetable_ids?: Array<string>
  triggers?: Array<Rule_TriggerData>
  _limits: {
    number?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/halt'?: string
    '/pelco/rel/timetables'?: string
    '/pelco/rel/trigger'?: string
  }
  _embedded: {
    '/pelco/rel/timetables'?: TimeTables
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Rule.create)
  }
  edit(data: RuleEditData) {
    return this._serenity.patchSimple<Rule, RuleEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getTimetables(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/timetables'], { params: params }, TimeTables.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Rule'
    if (this.triggers) {
      this.triggers = this.triggers.map(item => Rule_Trigger.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/timetables'] === undefined) { this.getTimetables = undefined }
    return this
  }
}

export interface Rule_TriggerData {
  situation_type?: SituationType
  source_refs?: Array<ResourceRef>
}

export class Rule_Trigger extends SerenityObjectBase {
  static create(data, serenity: Serenity): Rule_Trigger {
    return lodash.assign(new Rule_Trigger(), data).build(serenity)
  }
  situation_type?: SituationType
  source_refs?: Array<ResourceRef>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Rule.Trigger'
    return this
  }
}

export interface RulesData {
  collection_header?: CollectionHeaderData
  rules: Array<RuleData>
}

export class Rules extends SerenityCollectionBase<Rules> {
  static create(data, serenity: Serenity): Rules {
    return lodash.assign(new Rules(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  rules: Array<Rule>
  _links: {
    '/pelco/rel/add_rule'?: string
  }
  postAddRule(data: NewRuleData, config?: PostRequestConfig) {
    let postData = NewRule.create(data, this._serenity)
    postData._type = 'NewRule'
    return this._serenity.postSimple<NewRule, Rule>(
      this._links['/pelco/rel/add_rule'], postData, config, Rule.create
    )
  }
  forEachRule(callbackfn: (x: Rule) => void): Promise<void> {
    return forEachX<Rules, Rule>('rules', this, callbackfn)
  }
  getAllRules(): Promise<Array<Rule>> {
    return getAllX<Rules, Rule>('rules', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Rules'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Rules.create)
    }
    if (this.rules) {
      this.rules = this.rules.map(item => Rule.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_rule'] === undefined) { this.postAddRule = undefined }
    return this
  }
}

export interface ScheduleData {
  action: ScheduleAction
  all_data_sources?: boolean
  data_source_types?: Array<DataSourceType>
  enabled?: boolean
  id: string
  name?: string
  schedule_triggers: Array<ScheduleTriggerData>
}

export interface ScheduleEditData {
  action: ScheduleAction
  all_data_sources?: boolean
  data_source_types?: Array<DataSourceType>
  enabled?: boolean
  name?: string
}

export class Schedule extends SerenityObjectBase {
  static create(data, serenity: Serenity): Schedule {
    return lodash.assign(new Schedule(), data).build(serenity)
  }
  action: ScheduleAction
  all_data_sources?: boolean
  data_source_types?: Array<DataSourceType>
  enabled?: boolean
  id: string
  name?: string
  schedule_triggers: Array<ScheduleTrigger>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/add_schedule_trigger'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/link'?: string
    '/pelco/rel/resources'?: string
    '/pelco/rel/unlink'?: string
  }
  _embedded: {
    '/pelco/rel/resources'?: Resources
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Schedule.create)
  }
  edit(data: ScheduleEditData) {
    return this._serenity.patchSimple<Schedule, ScheduleEditData>(this, data)
  }
  postAddScheduleTrigger(data: NewScheduleTriggerData, config?: PostRequestConfig) {
    let postData = NewScheduleTrigger.create(data, this._serenity)
    postData._type = 'NewScheduleTrigger'
    return this._serenity.postSimple<NewScheduleTrigger, ScheduleTrigger>(
      this._links['/pelco/rel/add_schedule_trigger'], postData, config, ScheduleTrigger.create
    )
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postLink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/link'], postData, config
    )
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  postUnlink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unlink'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Schedule'
    if (this.schedule_triggers) {
      this.schedule_triggers = this.schedule_triggers.map(item => ScheduleTrigger.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/add_schedule_trigger'] === undefined) { this.postAddScheduleTrigger = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/link'] === undefined) { this.postLink = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    if (!this._links || this._links['/pelco/rel/unlink'] === undefined) { this.postUnlink = undefined }
    return this
  }
}

export interface SchedulesData {
  available_events: Array<SituationType>
  collection_header?: CollectionHeaderData
  schedules: Array<ScheduleData>
}

export class Schedules extends SerenityCollectionBase<Schedules> {
  static create(data, serenity: Serenity): Schedules {
    return lodash.assign(new Schedules(), data).build(serenity)
  }
  available_events: Array<SituationType>
  collection_header?: CollectionHeader
  schedules: Array<Schedule>
  _links: {
    '/pelco/rel/add_schedule'?: string
  }
  postAddSchedule(data: NewScheduleData, config?: PostRequestConfig) {
    let postData = NewSchedule.create(data, this._serenity)
    postData._type = 'NewSchedule'
    return this._serenity.postSimple<NewSchedule, Schedule>(
      this._links['/pelco/rel/add_schedule'], postData, config, Schedule.create
    )
  }
  forEachundefined(callbackfn: (x: undefined) => void): Promise<void> {
    return forEachX<Schedules, undefined>('available_events', this, callbackfn)
  }
  getAllSchedules(): Promise<Array<undefined>> {
    return getAllX<Schedules, undefined>('available_events', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Schedules'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Schedules.create)
    }
    if (this.schedules) {
      this.schedules = this.schedules.map(item => Schedule.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_schedule'] === undefined) { this.postAddSchedule = undefined }
    return this
  }
}

export interface ScheduleTriggerData {
  daily_end_time: TimeOfDay
  daily_start_time: TimeOfDay
  event?: SituationType
  event_properties?: KVObject
  framerate: RecordFramerate
  id: string
  post_trigger: number
  pre_trigger: number
  recurrence: RecurrenceType
  recur_monthly: Array<number>
  recur_yearly: Array<number>
  recur_weekly: Array<number>
  timeout: number
}

export interface ScheduleTriggerEditData {
  daily_end_time: TimeOfDay
  daily_start_time: TimeOfDay
  event?: SituationType
  event_properties?: KVObject
  framerate: RecordFramerate
  post_trigger: number
  pre_trigger: number
  recurrence: RecurrenceType
  recur_monthly: Array<number>
  recur_yearly: Array<number>
  recur_weekly: Array<number>
  timeout: number
}

export class ScheduleTrigger extends SerenityObjectBase {
  static create(data, serenity: Serenity): ScheduleTrigger {
    return lodash.assign(new ScheduleTrigger(), data).build(serenity)
  }
  daily_end_time: TimeOfDay
  daily_start_time: TimeOfDay
  event?: SituationType
  event_properties?: KVObject
  framerate: RecordFramerate
  id: string
  post_trigger: number
  pre_trigger: number
  recurrence: RecurrenceType
  recur_monthly: Array<number>
  recur_yearly: Array<number>
  recur_weekly: Array<number>
  timeout: number
  _limits: {
    post_trigger: Limit_Integer
    pre_trigger: Limit_Integer
    timeout: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, ScheduleTrigger.create)
  }
  edit(data: ScheduleTriggerEditData) {
    return this._serenity.patchSimple<ScheduleTrigger, ScheduleTriggerEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'ScheduleTrigger'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface SituationData {
  ack_needed: boolean
  audible_loop_delay?: number
  audible_notify: boolean
  audible_play_count?: number
  auto_ack: number
  expand_banner?: boolean
  log: boolean
  name?: string
  notification_ids: Array<string>
  notify: boolean
  popup_banner?: boolean
  service_property_id?: string
  service_type?: string
  severity: number
  snooze_intervals: Array<number>
  source_device_id?: string
  type: SituationType
}

export interface SituationEditData {
  ack_needed: boolean
  audible_loop_delay?: number
  audible_notify: boolean
  audible_play_count?: number
  auto_ack: number
  expand_banner?: boolean
  log: boolean
  name?: string
  notify: boolean
  popup_banner?: boolean
  severity: number
  snooze_intervals: Array<number>
}

export class Situation extends SerenityObjectBase {
  static create(data, serenity: Serenity): Situation {
    return lodash.assign(new Situation(), data).build(serenity)
  }
  ack_needed: boolean
  audible_loop_delay?: number
  audible_notify: boolean
  audible_play_count?: number
  auto_ack: number
  expand_banner?: boolean
  log: boolean
  name?: string
  notification_ids: Array<string>
  notify: boolean
  popup_banner?: boolean
  service_property_id?: string
  service_type?: string
  severity: number
  snooze_intervals: Array<number>
  source_device_id?: string
  type: SituationType
  _limits: {
    audible_loop_delay?: Limit_Integer
    audible_play_count?: Limit_Integer
    auto_ack: Limit_Integer
    severity: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/add_notification'?: string
    '/pelco/rel/audio'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/delete_audio'?: string
    '/pelco/rel/link'?: string
    '/pelco/rel/notifications'?: string
    '/pelco/rel/remove_notification'?: string
    '/pelco/rel/resources'?: string
    '/pelco/rel/set_audio'?: string
    '/pelco/rel/unlink'?: string
  }
  _embedded: {
    '/pelco/rel/notifications'?: Notifications
    '/pelco/rel/resources'?: Resources
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Situation.create)
  }
  edit(data: SituationEditData) {
    return this._serenity.patchSimple<Situation, SituationEditData>(this, data)
  }
  postAddNotification(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/add_notification'], postData, config
    )
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  deleteAudio() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete_audio'])
  }
  postLink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/link'], postData, config
    )
  }
  getNotifications(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/notifications'], { params: params }, Notifications.create)
  }
  postRemoveNotification(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/remove_notification'], postData, config
    )
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  postUnlink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unlink'], postData, config
    )
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Situation'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/add_notification'] === undefined) { this.postAddNotification = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/delete_audio'] === undefined) { this.deleteAudio = undefined }
    if (!this._links || this._links['/pelco/rel/link'] === undefined) { this.postLink = undefined }
    if (!this._links || this._links['/pelco/rel/notifications'] === undefined) { this.getNotifications = undefined }
    if (!this._links || this._links['/pelco/rel/remove_notification'] === undefined) { this.postRemoveNotification = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    if (!this._links || this._links['/pelco/rel/unlink'] === undefined) { this.postUnlink = undefined }
    return this
  }
}

export interface SituationsData {
  collection_header?: CollectionHeaderData
  situations: Array<SituationData>
}

export class Situations extends SerenityCollectionBase<Situations> {
  static create(data, serenity: Serenity): Situations {
    return lodash.assign(new Situations(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  situations: Array<Situation>
  _links: {
    '/pelco/rel/add_situation'?: string
  }
  postAddSituation(data: NewSituationData, config?: PostRequestConfig) {
    let postData = NewSituation.create(data, this._serenity)
    postData._type = 'NewSituation'
    return this._serenity.postSimple<NewSituation, Situation>(
      this._links['/pelco/rel/add_situation'], postData, config, Situation.create
    )
  }
  forEachSituation(callbackfn: (x: Situation) => void): Promise<void> {
    return forEachX<Situations, Situation>('situations', this, callbackfn)
  }
  getAllSituations(): Promise<Array<Situation>> {
    return getAllX<Situations, Situation>('situations', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Situations'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Situations.create)
    }
    if (this.situations) {
      this.situations = this.situations.map(item => Situation.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_situation'] === undefined) { this.postAddSituation = undefined }
    return this
  }
}

export interface SystemData {
  id: string
  name?: string
}

export interface SystemEditData {
  name?: string
}

export class System extends SerenityObjectBase {
  static create(data, serenity: Serenity): System {
    return lodash.assign(new System(), data).build(serenity)
  }
  id: string
  name?: string
  _links: {
    self: string
    edit?: string
    '/pelco/rel/alarm_inputs'?: string
    '/pelco/rel/assignments'?: string
    '/pelco/rel/batch'?: string
    '/pelco/rel/bookmarks'?: string
    '/pelco/rel/clips'?: string
    '/pelco/rel/cluster'?: string
    '/pelco/rel/configuration'?: string
    '/pelco/rel/data_objects'?: string
    '/pelco/rel/data_sessions'?: string
    '/pelco/rel/data_sources'?: string
    '/pelco/rel/data_storages'?: string
    '/pelco/rel/device'?: string
    '/pelco/rel/devices'?: string
    '/pelco/rel/drawings'?: string
    '/pelco/rel/event_subs'?: string
    '/pelco/rel/event_wss'?: string
    '/pelco/rel/events'?: string
    '/pelco/rel/exports'?: string
    '/pelco/rel/export_players'?: string
    '/pelco/rel/license'?: string
    '/pelco/rel/manual_recordings'?: string
    '/pelco/rel/members'?: string
    '/pelco/rel/monitor_walls'?: string
    '/pelco/rel/monitors'?: string
    '/pelco/rel/notifications'?: string
    '/pelco/rel/quicklog'?: string
    '/pelco/rel/quickreport'?: string
    '/pelco/rel/relay_outputs'?: string
    '/pelco/rel/roles'?: string
    '/pelco/rel/rules'?: string
    '/pelco/rel/schedules'?: string
    '/pelco/rel/situations'?: string
    '/pelco/rel/tags'?: string
    '/pelco/rel/timetables'?: string
    '/pelco/rel/user'?: string
    '/pelco/rel/users'?: string
  }
  _embedded: {
    '/pelco/rel/alarm_inputs'?: AlarmInputs
    '/pelco/rel/assignments'?: DeviceAssignments
    '/pelco/rel/bookmarks'?: Bookmarks
    '/pelco/rel/clips'?: Clips
    '/pelco/rel/cluster'?: Config_VxCluster
    '/pelco/rel/configuration'?: Config
    '/pelco/rel/data_objects'?: DataObjects
    '/pelco/rel/data_sessions'?: DataSessions
    '/pelco/rel/data_sources'?: DataSources
    '/pelco/rel/data_storages'?: DataStorages
    '/pelco/rel/device'?: Device
    '/pelco/rel/devices'?: Devices
    '/pelco/rel/drawings'?: Drawings
    '/pelco/rel/event_subs'?: EventSubscriptions
    '/pelco/rel/events'?: Events
    '/pelco/rel/exports'?: Exports
    '/pelco/rel/export_players'?: ExportPlayers
    '/pelco/rel/license'?: License
    '/pelco/rel/manual_recordings'?: ManualRecordings
    '/pelco/rel/members'?: Members
    '/pelco/rel/monitor_walls'?: MonitorWalls
    '/pelco/rel/monitors'?: Monitors
    '/pelco/rel/notifications'?: Notifications
    '/pelco/rel/relay_outputs'?: RelayOutputs
    '/pelco/rel/roles'?: Roles
    '/pelco/rel/rules'?: Rules
    '/pelco/rel/schedules'?: Schedules
    '/pelco/rel/situations'?: Situations
    '/pelco/rel/tags'?: Tags
    '/pelco/rel/timetables'?: TimeTables
    '/pelco/rel/user'?: User
    '/pelco/rel/users'?: Users
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, System.create)
  }
  edit(data: SystemEditData) {
    return this._serenity.patchSimple<System, SystemEditData>(this, data)
  }
  getAlarmInputs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/alarm_inputs'], { params: params }, AlarmInputs.create)
  }
  getAssignments(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/assignments'], { params: params }, DeviceAssignments.create)
  }
  getBookmarks(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/bookmarks'], { params: params }, Bookmarks.create)
  }
  getClips(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/clips'], { params: params }, Clips.create)
  }
  getCluster(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/cluster'], { params: params }, Config_VxCluster.create)
  }
  getConfiguration(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/configuration'], { params: params }, Config.create)
  }
  getDataObjects(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_objects'], { params: params }, DataObjects.create)
  }
  getDataSessions(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sessions'], { params: params }, DataSessions.create)
  }
  getDataSources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_sources'], { params: params }, DataSources.create)
  }
  getDataStorages(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_storages'], { params: params }, DataStorages.create)
  }
  getDevice(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/device'], { params: params }, Device.create)
  }
  getDevices(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/devices'], { params: params }, Devices.create)
  }
  getDrawings(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/drawings'], { params: params }, Drawings.create)
  }
  getEventSubs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/event_subs'], { params: params }, EventSubscriptions.create)
  }
  postEventWss(data: NotificationRequestData, config?: PostRequestConfig) {
    let postData = NotificationRequest.create(data, this._serenity)
    postData._type = 'NotificationRequest'
    return this._serenity.postSimple<NotificationRequest, any>(
      this._links['/pelco/rel/event_wss'], postData, config
    )
  }
  getEvents(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/events'], { params: params }, Events.create)
  }
  getExports(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/exports'], { params: params }, Exports.create)
  }
  getExportPlayers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/export_players'], { params: params }, ExportPlayers.create)
  }
  getLicense(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/license'], { params: params }, License.create)
  }
  getManualRecordings(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/manual_recordings'], { params: params }, ManualRecordings.create)
  }
  getMembers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/members'], { params: params }, Members.create)
  }
  getMonitorWalls(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/monitor_walls'], { params: params }, MonitorWalls.create)
  }
  getMonitors(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/monitors'], { params: params }, Monitors.create)
  }
  getNotifications(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/notifications'], { params: params }, Notifications.create)
  }
  postQuicklog(data: NewQuickLogData, config?: PostRequestConfig) {
    let postData = NewQuickLog.create(data, this._serenity)
    postData._type = 'NewQuickLog'
    return this._serenity.postSimple<NewQuickLog, any>(
      this._links['/pelco/rel/quicklog'], postData, config
    )
  }
  postQuickreport(data: NewQuickReportData, config?: PostRequestConfig) {
    let postData = NewQuickReport.create(data, this._serenity)
    postData._type = 'NewQuickReport'
    return this._serenity.postSimple<NewQuickReport, any>(
      this._links['/pelco/rel/quickreport'], postData, config
    )
  }
  getRelayOutputs(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/relay_outputs'], { params: params }, RelayOutputs.create)
  }
  getRoles(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/roles'], { params: params }, Roles.create)
  }
  getRules(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/rules'], { params: params }, Rules.create)
  }
  getSchedules(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/schedules'], { params: params }, Schedules.create)
  }
  getSituations(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/situations'], { params: params }, Situations.create)
  }
  getTags(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/tags'], { params: params }, Tags.create)
  }
  getTimetables(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/timetables'], { params: params }, TimeTables.create)
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  getUsers(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/users'], { params: params }, Users.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'System'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/alarm_inputs'] === undefined) { this.getAlarmInputs = undefined }
    if (!this._links || this._links['/pelco/rel/assignments'] === undefined) { this.getAssignments = undefined }
    if (!this._links || this._links['/pelco/rel/bookmarks'] === undefined) { this.getBookmarks = undefined }
    if (!this._links || this._links['/pelco/rel/clips'] === undefined) { this.getClips = undefined }
    if (!this._links || this._links['/pelco/rel/cluster'] === undefined) { this.getCluster = undefined }
    if (!this._links || this._links['/pelco/rel/configuration'] === undefined) { this.getConfiguration = undefined }
    if (!this._links || this._links['/pelco/rel/data_objects'] === undefined) { this.getDataObjects = undefined }
    if (!this._links || this._links['/pelco/rel/data_sessions'] === undefined) { this.getDataSessions = undefined }
    if (!this._links || this._links['/pelco/rel/data_sources'] === undefined) { this.getDataSources = undefined }
    if (!this._links || this._links['/pelco/rel/data_storages'] === undefined) { this.getDataStorages = undefined }
    if (!this._links || this._links['/pelco/rel/device'] === undefined) { this.getDevice = undefined }
    if (!this._links || this._links['/pelco/rel/devices'] === undefined) { this.getDevices = undefined }
    if (!this._links || this._links['/pelco/rel/drawings'] === undefined) { this.getDrawings = undefined }
    if (!this._links || this._links['/pelco/rel/event_subs'] === undefined) { this.getEventSubs = undefined }
    if (!this._links || this._links['/pelco/rel/event_wss'] === undefined) { this.postEventWss = undefined }
    if (!this._links || this._links['/pelco/rel/events'] === undefined) { this.getEvents = undefined }
    if (!this._links || this._links['/pelco/rel/exports'] === undefined) { this.getExports = undefined }
    if (!this._links || this._links['/pelco/rel/export_players'] === undefined) { this.getExportPlayers = undefined }
    if (!this._links || this._links['/pelco/rel/license'] === undefined) { this.getLicense = undefined }
    if (!this._links || this._links['/pelco/rel/manual_recordings'] === undefined) { this.getManualRecordings = undefined }
    if (!this._links || this._links['/pelco/rel/members'] === undefined) { this.getMembers = undefined }
    if (!this._links || this._links['/pelco/rel/monitor_walls'] === undefined) { this.getMonitorWalls = undefined }
    if (!this._links || this._links['/pelco/rel/monitors'] === undefined) { this.getMonitors = undefined }
    if (!this._links || this._links['/pelco/rel/notifications'] === undefined) { this.getNotifications = undefined }
    if (!this._links || this._links['/pelco/rel/quicklog'] === undefined) { this.postQuicklog = undefined }
    if (!this._links || this._links['/pelco/rel/quickreport'] === undefined) { this.postQuickreport = undefined }
    if (!this._links || this._links['/pelco/rel/relay_outputs'] === undefined) { this.getRelayOutputs = undefined }
    if (!this._links || this._links['/pelco/rel/roles'] === undefined) { this.getRoles = undefined }
    if (!this._links || this._links['/pelco/rel/rules'] === undefined) { this.getRules = undefined }
    if (!this._links || this._links['/pelco/rel/schedules'] === undefined) { this.getSchedules = undefined }
    if (!this._links || this._links['/pelco/rel/situations'] === undefined) { this.getSituations = undefined }
    if (!this._links || this._links['/pelco/rel/tags'] === undefined) { this.getTags = undefined }
    if (!this._links || this._links['/pelco/rel/timetables'] === undefined) { this.getTimetables = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    if (!this._links || this._links['/pelco/rel/users'] === undefined) { this.getUsers = undefined }
    return this
  }
}

export interface TagData {
  id: string
  name: string
  owner?: UPN
}

export interface TagEditData {
  name: string
}

export class Tag extends SerenityObjectBase {
  static create(data, serenity: Serenity): Tag {
    return lodash.assign(new Tag(), data).build(serenity)
  }
  id: string
  name: string
  owner?: UPN
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/link'?: string
    '/pelco/rel/merge'?: string
    '/pelco/rel/resources'?: string
    '/pelco/rel/unlink'?: string
    '/pelco/rel/user'?: string
  }
  _embedded: {
    '/pelco/rel/resources'?: Resources
    '/pelco/rel/user'?: User
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Tag.create)
  }
  edit(data: TagEditData) {
    return this._serenity.patchSimple<Tag, TagEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postLink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/link'], postData, config
    )
  }
  postMerge(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/merge'], postData, config
    )
  }
  getResources(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resources'], { params: params }, Resources.create)
  }
  postUnlink(data: Resource_ResourceRefsData, config?: PostRequestConfig) {
    let postData = Resource_ResourceRefs.create(data, this._serenity)
    postData._type = 'Resource.ResourceRefs'
    return this._serenity.postSimple<Resource_ResourceRefs, any>(
      this._links['/pelco/rel/unlink'], postData, config
    )
  }
  getUser(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/user'], { params: params }, User.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Tag'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/link'] === undefined) { this.postLink = undefined }
    if (!this._links || this._links['/pelco/rel/merge'] === undefined) { this.postMerge = undefined }
    if (!this._links || this._links['/pelco/rel/resources'] === undefined) { this.getResources = undefined }
    if (!this._links || this._links['/pelco/rel/unlink'] === undefined) { this.postUnlink = undefined }
    if (!this._links || this._links['/pelco/rel/user'] === undefined) { this.getUser = undefined }
    return this
  }
}

export interface TagsData {
  collection_header?: CollectionHeaderData
  tags: Array<TagData>
}

export class Tags extends SerenityCollectionBase<Tags> {
  static create(data, serenity: Serenity): Tags {
    return lodash.assign(new Tags(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  tags: Array<Tag>
  _links: {
    '/pelco/rel/add_tag'?: string
    '/pelco/rel/add_private_tag'?: string
  }
  postAddTag(data: NewTagData, config?: PostRequestConfig) {
    let postData = NewTag.create(data, this._serenity)
    postData._type = 'NewTag'
    return this._serenity.postSimple<NewTag, Tag>(
      this._links['/pelco/rel/add_tag'], postData, config, Tag.create
    )
  }
  postAddPrivateTag(data: NewTagData, config?: PostRequestConfig) {
    let postData = NewTag.create(data, this._serenity)
    postData._type = 'NewTag'
    return this._serenity.postSimple<NewTag, Tag>(
      this._links['/pelco/rel/add_private_tag'], postData, config, Tag.create
    )
  }
  forEachTag(callbackfn: (x: Tag) => void): Promise<void> {
    return forEachX<Tags, Tag>('tags', this, callbackfn)
  }
  getAllTags(): Promise<Array<Tag>> {
    return getAllX<Tags, Tag>('tags', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Tags'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Tags.create)
    }
    if (this.tags) {
      this.tags = this.tags.map(item => Tag.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_tag'] === undefined) { this.postAddTag = undefined }
    if (!this._links || this._links['/pelco/rel/add_private_tag'] === undefined) { this.postAddPrivateTag = undefined }
    return this
  }
}

export interface TimeTableData {
  id: string
  name: string
  weekly_time_ranges?: Array<TimeRange>
}

export interface TimeTableEditData {
  name: string
}

export class TimeTable extends SerenityObjectBase {
  static create(data, serenity: Serenity): TimeTable {
    return lodash.assign(new TimeTable(), data).build(serenity)
  }
  id: string
  name: string
  weekly_time_ranges?: Array<TimeRange>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, TimeTable.create)
  }
  edit(data: TimeTableEditData) {
    return this._serenity.patchSimple<TimeTable, TimeTableEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'TimeTable'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface TimeTablesData {
  collection_header?: CollectionHeaderData
  timetables: Array<TimeTableData>
}

export class TimeTables extends SerenityCollectionBase<TimeTables> {
  static create(data, serenity: Serenity): TimeTables {
    return lodash.assign(new TimeTables(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  timetables: Array<TimeTable>
  _links: {
    '/pelco/rel/add_timetable'?: string
  }
  postAddTimetable(data: NewTimeTableData, config?: PostRequestConfig) {
    let postData = NewTimeTable.create(data, this._serenity)
    postData._type = 'NewTimeTable'
    return this._serenity.postSimple<NewTimeTable, TimeTable>(
      this._links['/pelco/rel/add_timetable'], postData, config, TimeTable.create
    )
  }
  forEachTimeTable(callbackfn: (x: TimeTable) => void): Promise<void> {
    return forEachX<TimeTables, TimeTable>('timetables', this, callbackfn)
  }
  getAllTimeTables(): Promise<Array<TimeTable>> {
    return getAllX<TimeTables, TimeTable>('timetables', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'TimeTables'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(TimeTables.create)
    }
    if (this.timetables) {
      this.timetables = this.timetables.map(item => TimeTable.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_timetable'] === undefined) { this.postAddTimetable = undefined }
    return this
  }
}

export interface UserData {
  domain?: string
  employee_id?: string
  first_name?: string
  last_name?: string
  has_role?: boolean
  id: string
  name: SASLString
  note?: string
  password_expiration?: Date
  phone_numbers?: Array<PhoneNumber>
}

export interface UserEditData {
  employee_id?: string
  first_name?: string
  last_name?: string
  note?: string
  phone_numbers?: Array<PhoneNumber>
}

export class User extends SerenityObjectBase {
  static create(data, serenity: Serenity): User {
    return lodash.assign(new User(), data).build(serenity)
  }
  domain?: string
  employee_id?: string
  first_name?: string
  last_name?: string
  has_role?: boolean
  id: string
  name: SASLString
  note?: string
  password_expiration?: Date
  phone_numbers?: Array<PhoneNumber>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/account'?: string
    '/pelco/rel/auth'?: string
    '/pelco/rel/data_objects'?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/new_password'?: string
    '/pelco/rel/roles'?: string
    '/pelco/rel/tags'?: string
  }
  _embedded: {
    '/pelco/rel/account'?: UserAccount
    '/pelco/rel/auth'?: UserAuth
    '/pelco/rel/data_objects'?: DataObjects
    '/pelco/rel/roles'?: Roles
    '/pelco/rel/tags'?: Tags
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, User.create)
  }
  edit(data: UserEditData) {
    return this._serenity.patchSimple<User, UserEditData>(this, data)
  }
  getAccount(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/account'], { params: params }, UserAccount.create)
  }
  getAuth(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/auth'], { params: params }, UserAuth.create)
  }
  getDataObjects(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/data_objects'], { params: params }, DataObjects.create)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  postNewPassword(data: NewPasswordRequestData, config?: PostRequestConfig) {
    let postData = NewPasswordRequest.create(data, this._serenity)
    postData._type = 'NewPasswordRequest'
    return this._serenity.postSimple<NewPasswordRequest, any>(
      this._links['/pelco/rel/new_password'], postData, config
    )
  }
  getRoles(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/roles'], { params: params }, Roles.create)
  }
  getTags(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/tags'], { params: params }, Tags.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'User'
    if (this.password_expiration) {
      this.password_expiration = new Date(this.password_expiration)
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/account'] === undefined) { this.getAccount = undefined }
    if (!this._links || this._links['/pelco/rel/auth'] === undefined) { this.getAuth = undefined }
    if (!this._links || this._links['/pelco/rel/data_objects'] === undefined) { this.getDataObjects = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/new_password'] === undefined) { this.postNewPassword = undefined }
    if (!this._links || this._links['/pelco/rel/roles'] === undefined) { this.getRoles = undefined }
    if (!this._links || this._links['/pelco/rel/tags'] === undefined) { this.getTags = undefined }
    return this
  }
}

export interface UserAccountData {
  enabled: boolean
}

export interface UserAccountEditData {
  enabled: boolean
}

export class UserAccount extends SerenityObjectBase {
  static create(data, serenity: Serenity): UserAccount {
    return lodash.assign(new UserAccount(), data).build(serenity)
  }
  enabled: boolean
  _links: {
    self: string
    edit?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, UserAccount.create)
  }
  edit(data: UserAccountEditData) {
    return this._serenity.patchSimple<UserAccount, UserAccountEditData>(this, data)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'UserAccount'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    return this
  }
}

export interface UserAuthData {
}

export class UserAuth extends SerenityObjectBase {
  static create(data, serenity: Serenity): UserAuth {
    return lodash.assign(new UserAuth(), data).build(serenity)
  }
  _links: {
    self: string
    '/pelco/rel/add_role'?: string
    '/pelco/rel/remove_role'?: string
    '/pelco/rel/roles'?: string
  }
  _embedded: {
    '/pelco/rel/roles'?: Roles
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, UserAuth.create)
  }
  postAddRole(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/add_role'], postData, config
    )
  }
  postRemoveRole(data: Resource_StringData, config?: PostRequestConfig) {
    let postData = Resource_String.create(data, this._serenity)
    postData._type = 'Resource.String'
    return this._serenity.postSimple<Resource_String, any>(
      this._links['/pelco/rel/remove_role'], postData, config
    )
  }
  getRoles(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/roles'], { params: params }, Roles.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'UserAuth'
    if (!this._links || this._links['/pelco/rel/add_role'] === undefined) { this.postAddRole = undefined }
    if (!this._links || this._links['/pelco/rel/remove_role'] === undefined) { this.postRemoveRole = undefined }
    if (!this._links || this._links['/pelco/rel/roles'] === undefined) { this.getRoles = undefined }
    return this
  }
}

export interface UserInfoData {
  employee_id?: string
  first_name?: string
  last_name?: string
  name: string
  note?: string
  phone_numbers?: Array<PhoneNumber>
}

export class UserInfo extends SerenityObjectBase {
  static create(data, serenity: Serenity): UserInfo {
    return lodash.assign(new UserInfo(), data).build(serenity)
  }
  employee_id?: string
  first_name?: string
  last_name?: string
  name: string
  note?: string
  phone_numbers?: Array<PhoneNumber>
  _links: {
    self: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, UserInfo.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'UserInfo'
    return this
  }
}

export interface UsersData {
  collection_header?: CollectionHeaderData
  users: Array<UserData>
}

export class Users extends SerenityCollectionBase<Users> {
  static create(data, serenity: Serenity): Users {
    return lodash.assign(new Users(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  users: Array<User>
  _links: {
    '/pelco/rel/add_user'?: string
  }
  postAddUser(data: NewUserData, config?: PostRequestConfig) {
    let postData = NewUser.create(data, this._serenity)
    postData._type = 'NewUser'
    return this._serenity.postSimple<NewUser, User>(
      this._links['/pelco/rel/add_user'], postData, config, User.create
    )
  }
  forEachUser(callbackfn: (x: User) => void): Promise<void> {
    return forEachX<Users, User>('users', this, callbackfn)
  }
  getAllUsers(): Promise<Array<User>> {
    return getAllX<Users, User>('users', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Users'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Users.create)
    }
    if (this.users) {
      this.users = this.users.map(item => User.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_user'] === undefined) { this.postAddUser = undefined }
    return this
  }
}

export interface VersionsData {
  current_version: string
  supported_versions: Array<string>
}

export class Versions extends SerenityObjectBase {
  static create(data, serenity: Serenity): Versions {
    return lodash.assign(new Versions(), data).build(serenity)
  }
  current_version: string
  supported_versions: Array<string>
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Versions'
    return this
  }
}

export interface VolumeData {
  buffer?: number
  id: string
  online?: boolean
  path: string
  reserve_bandwidth?: boolean
  total?: number
  used?: number
}

export interface VolumeEditData {
  buffer?: number
  path: string
  reserve_bandwidth?: boolean
}

export class Volume extends SerenityObjectBase {
  static create(data, serenity: Serenity): Volume {
    return lodash.assign(new Volume(), data).build(serenity)
  }
  buffer?: number
  id: string
  online?: boolean
  path: string
  reserve_bandwidth?: boolean
  total?: number
  used?: number
  _limits: {
    total?: Limit_Integer
    used?: Limit_Integer
  }
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, Volume.create)
  }
  edit(data: VolumeEditData) {
    return this._serenity.patchSimple<Volume, VolumeEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Volume'
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    return this
  }
}

export interface VolumeGroupData {
  archive?: boolean
  id: string
  name: string
  volumes: Array<VolumeData>
}

export interface VolumeGroupEditData {
  archive?: boolean
  name: string
}

export class VolumeGroup extends SerenityObjectBase {
  static create(data, serenity: Serenity): VolumeGroup {
    return lodash.assign(new VolumeGroup(), data).build(serenity)
  }
  archive?: boolean
  id: string
  name: string
  volumes: Array<Volume>
  _links: {
    self: string
    edit?: string
    '/pelco/rel/delete'?: string
    '/pelco/rel/resource_rels'?: string
  }
  _embedded: {
    '/pelco/rel/resource_rels'?: ResourceRels
  }
  getSelf(params?) {
    return this._serenity
      .getSimple(this._links.self, { params: params }, VolumeGroup.create)
  }
  edit(data: VolumeGroupEditData) {
    return this._serenity.patchSimple<VolumeGroup, VolumeGroupEditData>(this, data)
  }
  delete() {
    return this._serenity.deleteSimple(this._links['/pelco/rel/delete'])
  }
  getResourceRels(params?) {
    return this._serenity
      .getSimple(this._links['/pelco/rel/resource_rels'], { params: params }, ResourceRels.create)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'VolumeGroup'
    if (this.volumes) {
      this.volumes = this.volumes.map(item => Volume.create(item, serenity))
    }
    if (!this._links || this._links['edit'] === undefined) { this.edit = undefined }
    if (!this._links || this._links['/pelco/rel/delete'] === undefined) { this.delete = undefined }
    if (!this._links || this._links['/pelco/rel/resource_rels'] === undefined) { this.getResourceRels = undefined }
    return this
  }
}

export interface VolumeGroupsData {
  collection_header?: CollectionHeaderData
  volume_groups: Array<VolumeGroupData>
}

export class VolumeGroups extends SerenityCollectionBase<VolumeGroups> {
  static create(data, serenity: Serenity): VolumeGroups {
    return lodash.assign(new VolumeGroups(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  volume_groups: Array<VolumeGroup>
  _links: {
    '/pelco/rel/add_volume_group'?: string
  }
  postAddVolumeGroup(data: NewVolumeGroupData, config?: PostRequestConfig) {
    let postData = NewVolumeGroup.create(data, this._serenity)
    postData._type = 'NewVolumeGroup'
    return this._serenity.postSimple<NewVolumeGroup, VolumeGroup>(
      this._links['/pelco/rel/add_volume_group'], postData, config, VolumeGroup.create
    )
  }
  forEachVolumeGroup(callbackfn: (x: VolumeGroup) => void): Promise<void> {
    return forEachX<VolumeGroups, VolumeGroup>('volume_groups', this, callbackfn)
  }
  getAllVolumeGroups(): Promise<Array<VolumeGroup>> {
    return getAllX<VolumeGroups, VolumeGroup>('volume_groups', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'VolumeGroups'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(VolumeGroups.create)
    }
    if (this.volume_groups) {
      this.volume_groups = this.volume_groups.map(item => VolumeGroup.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_volume_group'] === undefined) { this.postAddVolumeGroup = undefined }
    return this
  }
}

export interface VolumesData {
  collection_header?: CollectionHeaderData
  volumes: Array<VolumeData>
}

export class Volumes extends SerenityCollectionBase<Volumes> {
  static create(data, serenity: Serenity): Volumes {
    return lodash.assign(new Volumes(), data).build(serenity)
  }
  collection_header?: CollectionHeader
  volumes: Array<Volume>
  _links: {
    '/pelco/rel/add_volume'?: string
  }
  postAddVolume(data: NewVolumeData, config?: PostRequestConfig) {
    let postData = NewVolume.create(data, this._serenity)
    postData._type = 'NewVolume'
    return this._serenity.postSimple<NewVolume, Volume>(
      this._links['/pelco/rel/add_volume'], postData, config, Volume.create
    )
  }
  forEachVolume(callbackfn: (x: Volume) => void): Promise<void> {
    return forEachX<Volumes, Volume>('volumes', this, callbackfn)
  }
  getAllVolumes(): Promise<Array<Volume>> {
    return getAllX<Volumes, Volume>('volumes', this)
  }
  build(serenity: Serenity) {
    this._serenity = serenity
    this._type = 'Volumes'
    if (this.collection_header) {
      this.collection_header = CollectionHeader.create(this.collection_header, serenity)
      this.addCollectionLinks(Volumes.create)
    }
    if (this.volumes) {
      this.volumes = this.volumes.map(item => Volume.create(item, serenity))
    }
    if (!this._links || this._links['/pelco/rel/add_volume'] === undefined) { this.postAddVolume = undefined }
    return this
  }
}
